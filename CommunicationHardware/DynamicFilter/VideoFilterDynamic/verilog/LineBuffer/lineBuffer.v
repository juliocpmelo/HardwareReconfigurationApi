// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.4
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lineBuffer,hls_ip_2012_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc6slx45tfgg484-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.250000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=95}" *)

module lineBuffer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        y,
        pixel,
        param,
        output_r,
        output_r_ap_vld
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] x;
input  [23:0] y;
input  [23:0] pixel;
input  [7:0] param;
output  [23:0] output_r;
output   output_r_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[23:0] output_r;
reg output_r_ap_vld;
reg   [0:0] ap_CS_fsm = 1'b0;
reg   [10:0] pixelLine_address0;
reg    pixelLine_ce0;
reg    pixelLine_we0;
wire   [23:0] pixelLine_d0;
wire   [23:0] pixelLine_q0;
wire   [0:0] tmp_fu_85_p2;
reg   [0:0] tmp_reg_179;
wire   [0:0] tmp_3_fu_91_p2;
reg   [0:0] tmp_3_reg_183;
wire   [31:0] pixelLine_addr2_cast_fu_133_p1;
wire   [31:0] pixelLine_addr4_cast_fu_174_p1;
wire   [11:0] tmp_4_cast_fu_97_p1;
wire   [11:0] p_shl6_fu_105_p2;
wire   [11:0] p_shl7_fu_111_p2;
wire   [11:0] pixelLine_addr1_fu_117_p2;
wire   [10:0] pixelLine_addr1_cast_fu_123_p1;
wire   [10:0] tmp_5_cast_fu_101_p1;
wire   [10:0] pixelLine_addr2_fu_127_p2;
wire   [11:0] tmp_1_cast_fu_138_p1;
wire   [11:0] p_shl_fu_146_p2;
wire   [11:0] p_shl5_fu_152_p2;
wire   [11:0] pixelLine_addr3_fu_158_p2;
wire   [10:0] pixelLine_addr3_cast_fu_164_p1;
wire   [10:0] tmp_2_cast_fu_142_p1;
wire   [10:0] pixelLine_addr4_fu_168_p2;
reg   [0:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b0;
parameter    ap_ST_st2_fsm_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv8_1 = 8'b00000001;
parameter    ap_const_lv8_2 = 8'b00000010;
parameter    ap_const_lv12_9 = 12'b000000001001;
parameter    ap_const_lv12_7 = 12'b000000000111;
parameter    ap_true = 1'b1;


lineBuffer_pixelLine #(
    .DataWidth( 24 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
pixelLine_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( pixelLine_address0 ),
    .ce0( pixelLine_ce0 ),
    .we0( pixelLine_we0 ),
    .d0( pixelLine_d0 ),
    .q0( pixelLine_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_85_p2 == ap_const_lv1_0))) begin
        tmp_3_reg_183 <= tmp_3_fu_91_p2;
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        tmp_reg_179 <= tmp_fu_85_p2;
    end
end

/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st1_fsm_0;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        ap_NS_fsm = ap_ST_st2_fsm_1;
    end else begin
        ap_NS_fsm = ap_CS_fsm;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// output_r assign process. ///
always @ (ap_start or ap_CS_fsm or pixelLine_q0 or tmp_fu_85_p2 or tmp_reg_179 or tmp_3_fu_91_p2 or tmp_3_reg_183)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_179 == ap_const_lv1_0) & ~(tmp_3_reg_183 == ap_const_lv1_0))) begin
        output_r = pixelLine_q0;
    end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_85_p2 == ap_const_lv1_0) & (tmp_3_fu_91_p2 == ap_const_lv1_0)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_85_p2 == ap_const_lv1_0)))) begin
        output_r = ap_const_lv24_0;
    end else begin
        output_r = ap_const_lv24_0;
    end
end

/// output_r_ap_vld assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_85_p2 or tmp_reg_179 or tmp_3_fu_91_p2 or tmp_3_reg_183)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_85_p2 == ap_const_lv1_0) & (tmp_3_fu_91_p2 == ap_const_lv1_0)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_85_p2 == ap_const_lv1_0)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_179 == ap_const_lv1_0) & ~(tmp_3_reg_183 == ap_const_lv1_0)))) begin
        output_r_ap_vld = ap_const_logic_1;
    end else begin
        output_r_ap_vld = ap_const_logic_0;
    end
end

/// pixelLine_address0 assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_85_p2 or tmp_3_fu_91_p2 or pixelLine_addr2_cast_fu_133_p1 or pixelLine_addr4_cast_fu_174_p1)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_85_p2 == ap_const_lv1_0))) begin
        pixelLine_address0 = pixelLine_addr4_cast_fu_174_p1;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_85_p2 == ap_const_lv1_0) & ~(tmp_3_fu_91_p2 == ap_const_lv1_0))) begin
        pixelLine_address0 = pixelLine_addr2_cast_fu_133_p1;
    end else begin
        pixelLine_address0 = pixelLine_addr4_cast_fu_174_p1;
    end
end

/// pixelLine_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_85_p2 or tmp_3_fu_91_p2)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_85_p2 == ap_const_lv1_0) & ~(tmp_3_fu_91_p2 == ap_const_lv1_0)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_85_p2 == ap_const_lv1_0)))) begin
        pixelLine_ce0 = ap_const_logic_1;
    end else begin
        pixelLine_ce0 = ap_const_logic_0;
    end
end

/// pixelLine_we0 assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_85_p2)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_85_p2 == ap_const_lv1_0))) begin
        pixelLine_we0 = ap_const_logic_1;
    end else begin
        pixelLine_we0 = ap_const_logic_0;
    end
end
assign p_shl5_fu_152_p2 = tmp_1_cast_fu_138_p1 << ap_const_lv12_7;
assign p_shl6_fu_105_p2 = tmp_4_cast_fu_97_p1 << ap_const_lv12_9;
assign p_shl7_fu_111_p2 = tmp_4_cast_fu_97_p1 << ap_const_lv12_7;
assign p_shl_fu_146_p2 = tmp_1_cast_fu_138_p1 << ap_const_lv12_9;
assign pixelLine_addr1_cast_fu_123_p1 = pixelLine_addr1_fu_117_p2[10:0];
assign pixelLine_addr1_fu_117_p2 = (p_shl6_fu_105_p2 + p_shl7_fu_111_p2);
assign pixelLine_addr2_cast_fu_133_p1 = $unsigned(pixelLine_addr2_fu_127_p2);
assign pixelLine_addr2_fu_127_p2 = (pixelLine_addr1_cast_fu_123_p1 + tmp_5_cast_fu_101_p1);
assign pixelLine_addr3_cast_fu_164_p1 = pixelLine_addr3_fu_158_p2[10:0];
assign pixelLine_addr3_fu_158_p2 = (p_shl_fu_146_p2 + p_shl5_fu_152_p2);
assign pixelLine_addr4_cast_fu_174_p1 = $unsigned(pixelLine_addr4_fu_168_p2);
assign pixelLine_addr4_fu_168_p2 = (pixelLine_addr3_cast_fu_164_p1 + tmp_2_cast_fu_142_p1);
assign pixelLine_d0 = pixel;
assign tmp_1_cast_fu_138_p1 = y[11:0];
assign tmp_2_cast_fu_142_p1 = x[10:0];
assign tmp_3_fu_91_p2 = (param == ap_const_lv8_2? 1'b1: 1'b0);
assign tmp_4_cast_fu_97_p1 = y[11:0];
assign tmp_5_cast_fu_101_p1 = x[10:0];
assign tmp_fu_85_p2 = (param == ap_const_lv8_1? 1'b1: 1'b0);


endmodule //lineBuffer

