#include "CommunicationHardwareConverterVHDL.h"

using namespace std;

CommunicationHardwareConverterVHDL::CommunicationHardwareConverterVHDL(){}

void CommunicationHardwareConverterVHDL::buildComponentDescription(std::string componentPath, HardwareComponent* communicationHardwareComponent){
	
	ofstream outFile;
	string fileLocation = string(componentPath);
	cout<<"generating vhdl to component "<<endl;
	outFile.open (fileLocation.c_str());
	
	outFile <<"-- This file was auto generated by the CommunicationHardwareGenerator"<<endl<<endl;
	outFile <<"-- Component Declaration"<<endl<<endl;
	outFile <<"component "<<communicationHardwareComponent->componentInfo->name<<" is"<<endl; //TODO place the main tag name here
	outFile <<"generic ("<<endl;
	std::map<std::string, HardwareComponent::ParamInfo> paramTable = communicationHardwareComponent->componentInfo->componentParameters;

	map<string, HardwareComponent::ParamInfo>::iterator lastParam = paramTable.end();
	lastParam --;
	for(map<string, HardwareComponent::ParamInfo>::iterator it = paramTable.begin(); it != paramTable.end(); it++){
		if (it == lastParam)
			outFile<<"\t"<<translateParam(&(it->second))<<endl;
		else
			outFile<<"\t"<<translateParam(&(it->second))<<";"<<endl;

	}
	outFile <<");"<<endl;

	outFile <<"port ("<<endl;

	std::map<std::string, HardwareComponent::PortInfo*> portsTable = communicationHardwareComponent->ports;

	map<string, HardwareComponent::PortInfo*>::iterator lastElement = portsTable.end();
	lastElement --;
	for(map<string, HardwareComponent::PortInfo*>::iterator it = portsTable.begin(); it != portsTable.end(); it++){
		if (it == lastElement)
			outFile<<"\t"<<translatePort(it->second)<<endl;
		else
			outFile<<"\t"<<translatePort(it->second)<<";"<<endl;

	}
	outFile <<");"<<endl;

	outFile <<"end "<<communicationHardwareComponent->componentInfo->name<<";"<<endl<<endl;

	outFile <<"-- Component Declaration end"<<endl<<endl;

	outFile.close();

}

