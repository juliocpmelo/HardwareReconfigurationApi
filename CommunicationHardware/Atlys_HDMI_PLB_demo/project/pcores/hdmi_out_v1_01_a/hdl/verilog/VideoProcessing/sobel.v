// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.4
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel,hls_ip_2012_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc6slx45tfgg484-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.110000,HLS_SYN_LAT=54,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1860,HLS_SYN_LUT=2556}" *)

module sobel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pixel,
        pixelColumnCount,
        pixelLineCount,
        filteredXPixel,
        filteredXPixel_ap_vld,
        filteredYPixel,
        filteredYPixel_ap_vld
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] pixel;
input  [23:0] pixelColumnCount;
input  [23:0] pixelLineCount;
output  [23:0] filteredXPixel;
output   filteredXPixel_ap_vld;
output  [23:0] filteredYPixel;
output   filteredYPixel_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg filteredXPixel_ap_vld;
reg filteredYPixel_ap_vld;
reg   [5:0] ap_CS_fsm = 6'b000000;
reg   [10:0] pixelLine_address0;
reg    pixelLine_ce0;
reg    pixelLine_we0;
wire   [23:0] pixelLine_d0;
wire   [23:0] pixelLine_q0;
wire   [3:0] filterYConstants_address0;
reg    filterYConstants_ce0;
wire   [2:0] filterYConstants_q0;
wire   [3:0] filterXConstants_address0;
reg    filterXConstants_ce0;
wire   [2:0] filterXConstants_q0;
wire   [0:0] icmp1_fu_319_p2;
reg   [0:0] icmp1_reg_1039;
wire   [0:0] tmp_6_fu_325_p2;
reg   [0:0] tmp_6_reg_1044;
wire   [10:0] pixelLine_addr8_cast_fu_355_p2;
reg   [10:0] pixelLine_addr8_cast_reg_1049;
wire   [8:0] tmp_7_fu_417_p2;
reg   [8:0] tmp_7_reg_1099;
wire   [0:0] or_cond7_fu_407_p2;
wire   [1:0] countY_1_fu_459_p2;
reg   [1:0] countY_1_reg_1137;
wire   [3:0] tmp_9_cast_fu_465_p1;
reg   [3:0] tmp_9_cast_reg_1142;
wire   [0:0] exitcond_fu_453_p2;
wire   [8:0] tmp_9_cast1_fu_469_p1;
reg   [8:0] tmp_9_cast1_reg_1147;
wire   [1:0] countX_1_fu_479_p2;
reg   [1:0] countX_1_reg_1155;
wire   [0:0] exitcond1_fu_473_p2;
wire   [7:0] aux_cast_fu_561_p1;
reg   [7:0] aux_cast_reg_1175;
reg   [2:0] filterYConstants_load_reg_1180;
reg   [7:0] tmp_31_reg_1185;
reg   [7:0] tmp_33_reg_1190;
reg   [2:0] filterXConstants_load_reg_1195;
wire   [12:0] filterYConstants_load_cast_fu_585_p1;
wire   [12:0] tmp_32_fu_588_p1;
wire   [12:0] tmp_17_cast_cast_fu_597_p1;
wire   [12:0] tmp_19_cast_cast_fu_606_p1;
wire   [12:0] filterXConstants_load_cast_fu_615_p1;
wire   [12:0] grp_fu_591_p2;
reg   [12:0] tmp_14_reg_1232;
wire   [12:0] grp_fu_600_p2;
reg   [12:0] tmp_16_reg_1237;
wire   [12:0] grp_fu_609_p2;
reg   [12:0] tmp_17_reg_1242;
wire   [12:0] grp_fu_618_p2;
reg   [12:0] tmp_18_reg_1247;
wire   [12:0] grp_fu_624_p2;
reg   [12:0] tmp_19_reg_1252;
wire   [12:0] grp_fu_630_p2;
reg   [12:0] tmp_20_reg_1257;
reg   [1:0] countY_reg_195;
reg   [1:0] countX_reg_207;
reg   [23:0] pixelOutYG_1_reg_218;
reg   [23:0] pixelOutXR_1_reg_229;
reg   [23:0] pixelOutYR_1_reg_240;
reg   [23:0] pixelOutXG_1_reg_251;
reg   [23:0] pixelOutYB_1_reg_262;
reg   [23:0] pixelOutXB_1_reg_273;
wire   [31:0] pixelLine_addr9_cast_fu_370_p1;
wire   [31:0] pixelLine_addr7_cast_fu_529_p1;
wire   [31:0] filterYConstants_addr5_cast_fu_555_p1;
reg   [23:0] pixelOutXB_fu_94;
wire   [23:0] pixelOutXB_3_fu_684_p2;
reg   [23:0] pixelOutYB_fu_98;
wire   [23:0] pixelOutYB_3_fu_657_p2;
reg   [23:0] pixelOutXG_fu_102;
wire   [23:0] pixelOutXG_3_fu_675_p2;
reg   [23:0] pixelOutYR_fu_106;
wire   [23:0] pixelOutYR_3_fu_639_p2;
reg   [23:0] pixelOutXR_fu_110;
wire   [23:0] pixelOutXR_3_fu_666_p2;
reg   [23:0] pixelOutYG_fu_114;
wire   [23:0] pixelOutYG_3_fu_648_p2;
wire   [23:0] grp_fu_303_p0;
wire   [23:0] grp_fu_303_p1;
wire   [22:0] tmp_9_fu_309_p4;
wire   [23:0] grp_fu_303_p2;
wire   [10:0] tmp_1_cast_fu_335_p1;
wire   [9:0] tmp_1_cast1_fu_331_p1;
wire   [9:0] p_shl1_fu_345_p2;
wire   [10:0] p_shl_fu_339_p2;
wire   [10:0] pixelLine_addr8_cast_fu_355_p1;
wire   [10:0] tmp_2_cast_fu_361_p1;
wire   [10:0] pixelLine_addr9_fu_365_p2;
wire   [22:0] tmp_2_fu_375_p4;
wire   [0:0] icmp_fu_385_p2;
wire   [0:0] tmp_5_fu_391_p2;
wire   [0:0] tmp4_fu_402_p2;
wire   [0:0] tmp3_fu_397_p2;
wire   [8:0] minbit_trunc_cast_fu_413_p1;
wire   [8:0] tmp_12_cast_fu_489_p1;
wire   [8:0] tmp_12_fu_493_p2;
wire   [8:0] p_shl3_fu_502_p2;
wire   [10:0] p_shl3_cast_fu_507_p1;
wire   [10:0] pixelLine_addr1_fu_511_p5;
wire   [10:0] tmp_13_cast_cast_fu_498_p1;
wire   [10:0] pixelLine_addr7_fu_523_p2;
wire   [3:0] p_shl4_fu_534_p2;
wire   [3:0] tmp_30_fu_539_p1;
wire   [3:0] filterYConstants_addr4_cast_fu_543_p2;
wire   [3:0] tmp_11_cast_fu_485_p1;
wire   [3:0] filterYConstants_addr5_fu_549_p2;
wire   [2:0] grp_fu_591_p0;
wire   [7:0] grp_fu_591_p1;
wire   [2:0] grp_fu_600_p0;
wire   [7:0] grp_fu_600_p1;
wire   [2:0] grp_fu_609_p0;
wire   [7:0] grp_fu_609_p1;
wire   [2:0] grp_fu_618_p0;
wire   [7:0] grp_fu_618_p1;
wire   [2:0] grp_fu_624_p0;
wire   [7:0] grp_fu_624_p1;
wire   [2:0] grp_fu_630_p0;
wire   [7:0] grp_fu_630_p1;
wire   [23:0] pixelOutYR_3_fu_639_p0;
wire   [23:0] pixelOutYG_3_fu_648_p0;
wire   [23:0] pixelOutYB_3_fu_657_p0;
wire   [23:0] pixelOutXR_3_fu_666_p0;
wire   [23:0] pixelOutXG_3_fu_675_p0;
wire   [23:0] pixelOutXB_3_fu_684_p0;
wire   [15:0] tmp_13_fu_728_p4;
wire   [0:0] icmp2_fu_738_p2;
wire   [23:0] min_fu_744_p3;
wire   [0:0] tmp_11_fu_720_p3;
wire   [23:0] phitmp_fu_752_p2;
wire   [15:0] tmp_21_fu_774_p4;
wire   [0:0] icmp3_fu_784_p2;
wire   [23:0] min1_fu_790_p3;
wire   [0:0] tmp_15_fu_766_p3;
wire   [23:0] phitmp3_fu_798_p2;
wire   [15:0] tmp_23_fu_820_p4;
wire   [0:0] tmp_22_fu_812_p3;
wire   [0:0] not_signbit5_fu_836_p2;
wire   [7:0] min2_cast_fu_846_p0;
wire   [0:0] icmp4_fu_830_p2;
wire   [0:0] tmp_3_fu_850_p2;
wire   [23:0] min2_cast_fu_846_p1;
wire   [15:0] tmp_25_fu_872_p4;
wire   [0:0] icmp5_fu_882_p2;
wire   [23:0] min3_fu_888_p3;
wire   [0:0] tmp_24_fu_864_p3;
wire   [23:0] phitmp4_fu_896_p2;
wire   [15:0] tmp_27_fu_918_p4;
wire   [0:0] icmp6_fu_928_p2;
wire   [23:0] min4_fu_934_p3;
wire   [0:0] tmp_26_fu_910_p3;
wire   [23:0] phitmp5_fu_942_p2;
wire   [15:0] tmp_29_fu_964_p4;
wire   [0:0] tmp_28_fu_956_p3;
wire   [0:0] not_signbit_fu_980_p2;
wire   [7:0] min5_cast_fu_990_p0;
wire   [0:0] icmp7_fu_974_p2;
wire   [0:0] tmp_4_fu_994_p2;
wire   [23:0] min5_cast_fu_990_p1;
wire   [23:0] iftmp_s_fu_758_p3;
wire   [23:0] pixelOutYB_4_fu_856_p3;
wire   [23:0] tmp5_fu_1008_p2;
wire   [23:0] iftmp_1_fu_804_p3;
wire   [23:0] iftmp_2_fu_902_p3;
wire   [23:0] pixelOutXB_4_fu_1000_p3;
wire   [23:0] tmp6_fu_1021_p2;
wire   [23:0] iftmp_3_fu_948_p3;
wire    grp_fu_303_ce;
wire    grp_fu_591_ce;
wire    grp_fu_600_ce;
wire    grp_fu_609_ce;
wire    grp_fu_618_ce;
wire    grp_fu_624_ce;
wire    grp_fu_630_ce;
reg   [5:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b000000;
parameter    ap_ST_st2_fsm_1 = 6'b000001;
parameter    ap_ST_st3_fsm_2 = 6'b000010;
parameter    ap_ST_st4_fsm_3 = 6'b000011;
parameter    ap_ST_st5_fsm_4 = 6'b000100;
parameter    ap_ST_st6_fsm_5 = 6'b000101;
parameter    ap_ST_st7_fsm_6 = 6'b000110;
parameter    ap_ST_st8_fsm_7 = 6'b000111;
parameter    ap_ST_st9_fsm_8 = 6'b001000;
parameter    ap_ST_st10_fsm_9 = 6'b001001;
parameter    ap_ST_st11_fsm_10 = 6'b001010;
parameter    ap_ST_st12_fsm_11 = 6'b001011;
parameter    ap_ST_st13_fsm_12 = 6'b001100;
parameter    ap_ST_st14_fsm_13 = 6'b001101;
parameter    ap_ST_st15_fsm_14 = 6'b001110;
parameter    ap_ST_st16_fsm_15 = 6'b001111;
parameter    ap_ST_st17_fsm_16 = 6'b010000;
parameter    ap_ST_st18_fsm_17 = 6'b010001;
parameter    ap_ST_st19_fsm_18 = 6'b010010;
parameter    ap_ST_st20_fsm_19 = 6'b010011;
parameter    ap_ST_st21_fsm_20 = 6'b010100;
parameter    ap_ST_st22_fsm_21 = 6'b010101;
parameter    ap_ST_st23_fsm_22 = 6'b010110;
parameter    ap_ST_st24_fsm_23 = 6'b010111;
parameter    ap_ST_st25_fsm_24 = 6'b011000;
parameter    ap_ST_st26_fsm_25 = 6'b011001;
parameter    ap_ST_st27_fsm_26 = 6'b011010;
parameter    ap_ST_st28_fsm_27 = 6'b011011;
parameter    ap_ST_st29_fsm_28 = 6'b011100;
parameter    ap_ST_st30_fsm_29 = 6'b011101;
parameter    ap_ST_st31_fsm_30 = 6'b011110;
parameter    ap_ST_st32_fsm_31 = 6'b011111;
parameter    ap_ST_st33_fsm_32 = 6'b100000;
parameter    ap_ST_st34_fsm_33 = 6'b100001;
parameter    ap_ST_st35_fsm_34 = 6'b100010;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b00000000000000000000000000000001;
parameter    ap_const_lv24_3 = 24'b000000000000000000000011;
parameter    ap_const_lv32_17 = 32'b00000000000000000000000000010111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv24_1FF = 24'b000000000000000111111111;
parameter    ap_const_lv11_9 = 11'b00000001001;
parameter    ap_const_lv10_7 = 10'b0000000111;
parameter    ap_const_lv9_1FC = 9'b111111100;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b01;
parameter    ap_const_lv9_7 = 9'b000000111;
parameter    ap_const_lv32_9 = 32'b00000000000000000000000000001001;
parameter    ap_const_lv32_A = 32'b00000000000000000000000000001010;
parameter    ap_const_lv4_2 = 4'b0010;
parameter    ap_const_lv32_10 = 32'b00000000000000000000000000010000;
parameter    ap_const_lv32_8 = 32'b00000000000000000000000000001000;
parameter    ap_const_lv32_F = 32'b00000000000000000000000000001111;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv24_FF = 24'b000000000000000011111111;
parameter    ap_const_lv24_10 = 24'b000000000000000000010000;
parameter    ap_const_lv24_8 = 24'b000000000000000000001000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_true = 1'b1;


sobel_pixelLine #(
    .DataWidth( 24 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
pixelLine_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( pixelLine_address0 ),
    .ce0( pixelLine_ce0 ),
    .we0( pixelLine_we0 ),
    .d0( pixelLine_d0 ),
    .q0( pixelLine_q0 )
);

sobel_filterYConstants #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
filterYConstants_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( filterYConstants_address0 ),
    .ce0( filterYConstants_ce0 ),
    .q0( filterYConstants_q0 )
);

sobel_filterXConstants #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
filterXConstants_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( filterXConstants_address0 ),
    .ce0( filterXConstants_ce0 ),
    .q0( filterXConstants_q0 )
);

sobel_srem_24ns_24ns_24_27 #(
    .ID( 1 ),
    .NUM_STAGE( 27 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
sobel_srem_24ns_24ns_24_27_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_303_p0 ),
    .din1( grp_fu_303_p1 ),
    .ce( grp_fu_303_ce ),
    .dout( grp_fu_303_p2 )
);

sobel_mul_3s_8ns_13_2 #(
    .ID( 2 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8ns_13_2_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_591_p0 ),
    .din1( grp_fu_591_p1 ),
    .ce( grp_fu_591_ce ),
    .dout( grp_fu_591_p2 )
);

sobel_mul_3s_8ns_13_2 #(
    .ID( 3 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8ns_13_2_U3(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_600_p0 ),
    .din1( grp_fu_600_p1 ),
    .ce( grp_fu_600_ce ),
    .dout( grp_fu_600_p2 )
);

sobel_mul_3s_8ns_13_2 #(
    .ID( 4 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8ns_13_2_U4(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_609_p0 ),
    .din1( grp_fu_609_p1 ),
    .ce( grp_fu_609_ce ),
    .dout( grp_fu_609_p2 )
);

sobel_mul_3s_8ns_13_2 #(
    .ID( 5 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8ns_13_2_U5(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_618_p0 ),
    .din1( grp_fu_618_p1 ),
    .ce( grp_fu_618_ce ),
    .dout( grp_fu_618_p2 )
);

sobel_mul_3s_8ns_13_2 #(
    .ID( 6 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8ns_13_2_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_624_p0 ),
    .din1( grp_fu_624_p1 ),
    .ce( grp_fu_624_ce ),
    .dout( grp_fu_624_p2 )
);

sobel_mul_3s_8ns_13_2 #(
    .ID( 7 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8ns_13_2_U7(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_630_p0 ),
    .din1( grp_fu_630_p1 ),
    .ce( grp_fu_630_ce ),
    .dout( grp_fu_630_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st31_fsm_30 == ap_CS_fsm)) begin
        aux_cast_reg_1175 <= aux_cast_fu_561_p1;
    end
    if ((ap_ST_st30_fsm_29 == ap_CS_fsm)) begin
        countX_1_reg_1155 <= countX_1_fu_479_p2;
    end
    if (((ap_ST_st29_fsm_28 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_453_p2))) begin
        countX_reg_207 <= ap_const_lv2_0;
    end else if ((ap_ST_st34_fsm_33 == ap_CS_fsm)) begin
        countX_reg_207 <= countX_1_reg_1155;
    end
    if ((ap_ST_st29_fsm_28 == ap_CS_fsm)) begin
        countY_1_reg_1137 <= countY_1_fu_459_p2;
    end
    if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~(or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        countY_reg_195 <= ap_const_lv2_0;
    end else if (((ap_ST_st30_fsm_29 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_473_p2))) begin
        countY_reg_195 <= countY_1_reg_1137;
    end
    if ((ap_ST_st31_fsm_30 == ap_CS_fsm)) begin
        filterXConstants_load_reg_1195 <= filterXConstants_q0;
    end
    if ((ap_ST_st31_fsm_30 == ap_CS_fsm)) begin
        filterYConstants_load_reg_1180 <= filterYConstants_q0;
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        icmp1_reg_1039 <= icmp1_fu_319_p2;
    end
    if ((ap_ST_st27_fsm_26 == ap_CS_fsm)) begin
        pixelLine_addr8_cast_reg_1049[7] <= pixelLine_addr8_cast_fu_355_p2[7];
        pixelLine_addr8_cast_reg_1049[8] <= pixelLine_addr8_cast_fu_355_p2[8];
        pixelLine_addr8_cast_reg_1049[9] <= pixelLine_addr8_cast_fu_355_p2[9];
        pixelLine_addr8_cast_reg_1049[10] <= pixelLine_addr8_cast_fu_355_p2[10];
    end
    if (((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_453_p2))) begin
        pixelOutXB_1_reg_273 <= pixelOutXB_fu_94;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & (or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutXB_1_reg_273 <= ap_const_lv24_0;
    end
    if ((ap_ST_st34_fsm_33 == ap_CS_fsm)) begin
        pixelOutXB_fu_94 <= pixelOutXB_3_fu_684_p2;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~(or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutXB_fu_94 <= ap_const_lv24_0;
    end
    if (((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_453_p2))) begin
        pixelOutXG_1_reg_251 <= pixelOutXG_fu_102;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & (or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutXG_1_reg_251 <= ap_const_lv24_0;
    end
    if ((ap_ST_st34_fsm_33 == ap_CS_fsm)) begin
        pixelOutXG_fu_102 <= pixelOutXG_3_fu_675_p2;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~(or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutXG_fu_102 <= ap_const_lv24_0;
    end
    if (((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_453_p2))) begin
        pixelOutXR_1_reg_229 <= pixelOutXR_fu_110;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & (or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutXR_1_reg_229 <= ap_const_lv24_0;
    end
    if ((ap_ST_st34_fsm_33 == ap_CS_fsm)) begin
        pixelOutXR_fu_110 <= pixelOutXR_3_fu_666_p2;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~(or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutXR_fu_110 <= ap_const_lv24_0;
    end
    if (((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_453_p2))) begin
        pixelOutYB_1_reg_262 <= pixelOutYB_fu_98;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & (or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutYB_1_reg_262 <= ap_const_lv24_0;
    end
    if ((ap_ST_st34_fsm_33 == ap_CS_fsm)) begin
        pixelOutYB_fu_98 <= pixelOutYB_3_fu_657_p2;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~(or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutYB_fu_98 <= ap_const_lv24_0;
    end
    if (((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_453_p2))) begin
        pixelOutYG_1_reg_218 <= pixelOutYG_fu_114;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & (or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutYG_1_reg_218 <= ap_const_lv24_0;
    end
    if ((ap_ST_st34_fsm_33 == ap_CS_fsm)) begin
        pixelOutYG_fu_114 <= pixelOutYG_3_fu_648_p2;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~(or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutYG_fu_114 <= ap_const_lv24_0;
    end
    if (((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_453_p2))) begin
        pixelOutYR_1_reg_240 <= pixelOutYR_fu_106;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & (or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutYR_1_reg_240 <= ap_const_lv24_0;
    end
    if ((ap_ST_st34_fsm_33 == ap_CS_fsm)) begin
        pixelOutYR_fu_106 <= pixelOutYR_3_fu_639_p2;
    end else if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~(or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        pixelOutYR_fu_106 <= ap_const_lv24_0;
    end
    if ((ap_ST_st33_fsm_32 == ap_CS_fsm)) begin
        tmp_14_reg_1232 <= grp_fu_591_p2;
    end
    if ((ap_ST_st33_fsm_32 == ap_CS_fsm)) begin
        tmp_16_reg_1237 <= grp_fu_600_p2;
    end
    if ((ap_ST_st33_fsm_32 == ap_CS_fsm)) begin
        tmp_17_reg_1242 <= grp_fu_609_p2;
    end
    if ((ap_ST_st33_fsm_32 == ap_CS_fsm)) begin
        tmp_18_reg_1247 <= grp_fu_618_p2;
    end
    if ((ap_ST_st33_fsm_32 == ap_CS_fsm)) begin
        tmp_19_reg_1252 <= grp_fu_624_p2;
    end
    if ((ap_ST_st33_fsm_32 == ap_CS_fsm)) begin
        tmp_20_reg_1257 <= grp_fu_630_p2;
    end
    if ((ap_ST_st31_fsm_30 == ap_CS_fsm)) begin
        tmp_31_reg_1185 <= {{pixelLine_q0[ap_const_lv32_17 : ap_const_lv32_10]}};
    end
    if ((ap_ST_st31_fsm_30 == ap_CS_fsm)) begin
        tmp_33_reg_1190 <= {{pixelLine_q0[ap_const_lv32_F : ap_const_lv32_8]}};
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        tmp_6_reg_1044 <= tmp_6_fu_325_p2;
    end
    if (((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~(or_cond7_fu_407_p2 == ap_const_lv1_0))) begin
        tmp_7_reg_1099 <= tmp_7_fu_417_p2;
    end
    if (((ap_ST_st29_fsm_28 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_453_p2))) begin
        tmp_9_cast1_reg_1147[0] <= tmp_9_cast1_fu_469_p1[0];
        tmp_9_cast1_reg_1147[1] <= tmp_9_cast1_fu_469_p1[1];
    end
    if (((ap_ST_st29_fsm_28 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_453_p2))) begin
        tmp_9_cast_reg_1142[0] <= tmp_9_cast_fu_465_p1[0];
        tmp_9_cast_reg_1142[1] <= tmp_9_cast_fu_465_p1[1];
    end
end

/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or or_cond7_fu_407_p2 or exitcond_fu_453_p2 or exitcond1_fu_473_p2)
begin
    if ((ap_ST_st35_fsm_34 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st1_fsm_0;
    end else if ((ap_ST_st33_fsm_32 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st34_fsm_33;
    end else if ((ap_ST_st32_fsm_31 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st33_fsm_32;
    end else if ((ap_ST_st31_fsm_30 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st32_fsm_31;
    end else if (((ap_ST_st30_fsm_29 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_473_p2))) begin
        ap_NS_fsm = ap_ST_st31_fsm_30;
    end else if ((((ap_ST_st29_fsm_28 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_453_p2)) | (ap_ST_st34_fsm_33 == ap_CS_fsm))) begin
        ap_NS_fsm = ap_ST_st30_fsm_29;
    end else if ((((ap_ST_st28_fsm_27 == ap_CS_fsm) & ~(or_cond7_fu_407_p2 == ap_const_lv1_0)) | ((ap_ST_st30_fsm_29 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_473_p2)))) begin
        ap_NS_fsm = ap_ST_st29_fsm_28;
    end else if ((((ap_ST_st28_fsm_27 == ap_CS_fsm) & (or_cond7_fu_407_p2 == ap_const_lv1_0)) | ((ap_ST_st29_fsm_28 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_453_p2)))) begin
        ap_NS_fsm = ap_ST_st35_fsm_34;
    end else if ((ap_ST_st27_fsm_26 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st28_fsm_27;
    end else if ((ap_ST_st26_fsm_25 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st27_fsm_26;
    end else if ((ap_ST_st25_fsm_24 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st26_fsm_25;
    end else if ((ap_ST_st24_fsm_23 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st25_fsm_24;
    end else if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st24_fsm_23;
    end else if ((ap_ST_st22_fsm_21 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st23_fsm_22;
    end else if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st22_fsm_21;
    end else if ((ap_ST_st20_fsm_19 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st21_fsm_20;
    end else if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st20_fsm_19;
    end else if ((ap_ST_st18_fsm_17 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st19_fsm_18;
    end else if ((ap_ST_st17_fsm_16 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st18_fsm_17;
    end else if ((ap_ST_st16_fsm_15 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st17_fsm_16;
    end else if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st16_fsm_15;
    end else if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st15_fsm_14;
    end else if ((ap_ST_st13_fsm_12 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st14_fsm_13;
    end else if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st13_fsm_12;
    end else if ((ap_ST_st11_fsm_10 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st12_fsm_11;
    end else if ((ap_ST_st10_fsm_9 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st11_fsm_10;
    end else if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st10_fsm_9;
    end else if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st9_fsm_8;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st8_fsm_7;
    end else if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st7_fsm_6;
    end else if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st6_fsm_5;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st5_fsm_4;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st4_fsm_3;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st3_fsm_2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        ap_NS_fsm = ap_ST_st2_fsm_1;
    end else begin
        ap_NS_fsm = ap_CS_fsm;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st35_fsm_34 == ap_CS_fsm)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st35_fsm_34 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// filterXConstants_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_473_p2)
begin
    if (((ap_ST_st30_fsm_29 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_473_p2))) begin
        filterXConstants_ce0 = ap_const_logic_1;
    end else begin
        filterXConstants_ce0 = ap_const_logic_0;
    end
end

/// filterYConstants_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_473_p2)
begin
    if (((ap_ST_st30_fsm_29 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_473_p2))) begin
        filterYConstants_ce0 = ap_const_logic_1;
    end else begin
        filterYConstants_ce0 = ap_const_logic_0;
    end
end

/// filteredXPixel_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st35_fsm_34 == ap_CS_fsm)) begin
        filteredXPixel_ap_vld = ap_const_logic_1;
    end else begin
        filteredXPixel_ap_vld = ap_const_logic_0;
    end
end

/// filteredYPixel_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st35_fsm_34 == ap_CS_fsm)) begin
        filteredYPixel_ap_vld = ap_const_logic_1;
    end else begin
        filteredYPixel_ap_vld = ap_const_logic_0;
    end
end

/// pixelLine_address0 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_473_p2 or pixelLine_addr9_cast_fu_370_p1 or pixelLine_addr7_cast_fu_529_p1)
begin
    if ((ap_ST_st28_fsm_27 == ap_CS_fsm)) begin
        pixelLine_address0 = pixelLine_addr9_cast_fu_370_p1;
    end else if (((ap_ST_st30_fsm_29 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_473_p2))) begin
        pixelLine_address0 = pixelLine_addr7_cast_fu_529_p1;
    end else begin
        pixelLine_address0 = pixelLine_addr9_cast_fu_370_p1;
    end
end

/// pixelLine_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_473_p2)
begin
    if (((ap_ST_st28_fsm_27 == ap_CS_fsm) | ((ap_ST_st30_fsm_29 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_473_p2)))) begin
        pixelLine_ce0 = ap_const_logic_1;
    end else begin
        pixelLine_ce0 = ap_const_logic_0;
    end
end

/// pixelLine_we0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st28_fsm_27 == ap_CS_fsm)) begin
        pixelLine_we0 = ap_const_logic_1;
    end else begin
        pixelLine_we0 = ap_const_logic_0;
    end
end
assign aux_cast_fu_561_p1 = pixelLine_q0[7:0];
assign countX_1_fu_479_p2 = (countX_reg_207 + ap_const_lv2_1);
assign countY_1_fu_459_p2 = (countY_reg_195 + ap_const_lv2_1);
assign exitcond1_fu_473_p2 = (countX_reg_207 == ap_const_lv2_3? 1'b1: 1'b0);
assign exitcond_fu_453_p2 = (countY_reg_195 == ap_const_lv2_3? 1'b1: 1'b0);
assign filterXConstants_address0 = filterYConstants_addr5_cast_fu_555_p1;
assign filterXConstants_load_cast_fu_615_p1 = $signed(filterXConstants_load_reg_1195);
assign filterYConstants_addr4_cast_fu_543_p2 = (p_shl4_fu_534_p2 - tmp_30_fu_539_p1);
assign filterYConstants_addr5_cast_fu_555_p1 = $unsigned(filterYConstants_addr5_fu_549_p2);
assign filterYConstants_addr5_fu_549_p2 = (filterYConstants_addr4_cast_fu_543_p2 + tmp_11_cast_fu_485_p1);
assign filterYConstants_address0 = filterYConstants_addr5_cast_fu_555_p1;
assign filterYConstants_load_cast_fu_585_p1 = $signed(filterYConstants_load_reg_1180);
assign filteredXPixel = (tmp6_fu_1021_p2 | iftmp_3_fu_948_p3);
assign filteredYPixel = (tmp5_fu_1008_p2 | iftmp_1_fu_804_p3);
assign grp_fu_303_ce = ap_const_logic_1;
assign grp_fu_303_p0 = pixelLineCount;
assign grp_fu_303_p1 = ap_const_lv24_3;
assign grp_fu_591_ce = ap_const_logic_1;
assign grp_fu_591_p0 = filterYConstants_load_cast_fu_585_p1;
assign grp_fu_591_p1 = tmp_32_fu_588_p1;
assign grp_fu_600_ce = ap_const_logic_1;
assign grp_fu_600_p0 = filterYConstants_load_cast_fu_585_p1;
assign grp_fu_600_p1 = tmp_17_cast_cast_fu_597_p1;
assign grp_fu_609_ce = ap_const_logic_1;
assign grp_fu_609_p0 = filterYConstants_load_cast_fu_585_p1;
assign grp_fu_609_p1 = tmp_19_cast_cast_fu_606_p1;
assign grp_fu_618_ce = ap_const_logic_1;
assign grp_fu_618_p0 = filterXConstants_load_cast_fu_615_p1;
assign grp_fu_618_p1 = tmp_32_fu_588_p1;
assign grp_fu_624_ce = ap_const_logic_1;
assign grp_fu_624_p0 = filterXConstants_load_cast_fu_615_p1;
assign grp_fu_624_p1 = tmp_17_cast_cast_fu_597_p1;
assign grp_fu_630_ce = ap_const_logic_1;
assign grp_fu_630_p0 = filterXConstants_load_cast_fu_615_p1;
assign grp_fu_630_p1 = tmp_19_cast_cast_fu_606_p1;
assign icmp1_fu_319_p2 = ($signed(tmp_9_fu_309_p4) > $signed(23'b00000000000000000000000)? 1'b1: 1'b0);
assign icmp2_fu_738_p2 = ($signed(tmp_13_fu_728_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp3_fu_784_p2 = ($signed(tmp_21_fu_774_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp4_fu_830_p2 = ($signed(tmp_23_fu_820_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp5_fu_882_p2 = ($signed(tmp_25_fu_872_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp6_fu_928_p2 = ($signed(tmp_27_fu_918_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp7_fu_974_p2 = ($signed(tmp_29_fu_964_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp_fu_385_p2 = ($signed(tmp_2_fu_375_p4) > $signed(23'b00000000000000000000000)? 1'b1: 1'b0);
assign iftmp_1_fu_804_p3 = ((tmp_15_fu_766_p3)? ap_const_lv24_0: phitmp3_fu_798_p2);
assign iftmp_2_fu_902_p3 = ((tmp_24_fu_864_p3)? ap_const_lv24_0: phitmp4_fu_896_p2);
assign iftmp_3_fu_948_p3 = ((tmp_26_fu_910_p3)? ap_const_lv24_0: phitmp5_fu_942_p2);
assign iftmp_s_fu_758_p3 = ((tmp_11_fu_720_p3)? ap_const_lv24_0: phitmp_fu_752_p2);
assign min1_fu_790_p3 = ((icmp3_fu_784_p2)? ap_const_lv24_FF: pixelOutYG_1_reg_218);
assign min2_cast_fu_846_p0 = $signed(not_signbit5_fu_836_p2);
assign min2_cast_fu_846_p1 = $unsigned(min2_cast_fu_846_p0);
assign min3_fu_888_p3 = ((icmp5_fu_882_p2)? ap_const_lv24_FF: pixelOutXR_1_reg_229);
assign min4_fu_934_p3 = ((icmp6_fu_928_p2)? ap_const_lv24_FF: pixelOutXG_1_reg_251);
assign min5_cast_fu_990_p0 = $signed(not_signbit_fu_980_p2);
assign min5_cast_fu_990_p1 = $unsigned(min5_cast_fu_990_p0);
assign min_fu_744_p3 = ((icmp2_fu_738_p2)? ap_const_lv24_FF: pixelOutYR_1_reg_240);
assign minbit_trunc_cast_fu_413_p1 = pixelColumnCount[8:0];
assign not_signbit5_fu_836_p2 = (tmp_22_fu_812_p3 ^ ap_const_lv1_1);
assign not_signbit_fu_980_p2 = (tmp_28_fu_956_p3 ^ ap_const_lv1_1);
assign or_cond7_fu_407_p2 = (tmp4_fu_402_p2 & tmp3_fu_397_p2);
assign p_shl1_fu_345_p2 = tmp_1_cast1_fu_331_p1 << ap_const_lv10_7;
assign p_shl3_cast_fu_507_p1 = $unsigned(p_shl3_fu_502_p2);
assign p_shl3_fu_502_p2 = tmp_9_cast1_reg_1147 << ap_const_lv9_7;
assign p_shl4_fu_534_p2 = tmp_9_cast_reg_1142 << ap_const_lv4_2;
assign p_shl_fu_339_p2 = tmp_1_cast_fu_335_p1 << ap_const_lv11_9;
assign phitmp3_fu_798_p2 = min1_fu_790_p3 << ap_const_lv24_8;
assign phitmp4_fu_896_p2 = min3_fu_888_p3 << ap_const_lv24_10;
assign phitmp5_fu_942_p2 = min4_fu_934_p3 << ap_const_lv24_8;
assign phitmp_fu_752_p2 = min_fu_744_p3 << ap_const_lv24_10;
assign pixelLine_addr1_fu_511_p5 = {{countY_reg_195}, {p_shl3_cast_fu_507_p1[32'd8 : 32'd0]}};
assign pixelLine_addr7_cast_fu_529_p1 = $unsigned(pixelLine_addr7_fu_523_p2);
assign pixelLine_addr7_fu_523_p2 = (pixelLine_addr1_fu_511_p5 + tmp_13_cast_cast_fu_498_p1);
assign pixelLine_addr8_cast_fu_355_p1 = $signed(p_shl1_fu_345_p2);
assign pixelLine_addr8_cast_fu_355_p2 = (p_shl_fu_339_p2 + pixelLine_addr8_cast_fu_355_p1);
assign pixelLine_addr9_cast_fu_370_p1 = $unsigned(pixelLine_addr9_fu_365_p2);
assign pixelLine_addr9_fu_365_p2 = (pixelLine_addr8_cast_reg_1049 + tmp_2_cast_fu_361_p1);
assign pixelLine_d0 = pixel;
assign pixelOutXB_3_fu_684_p0 = $signed(tmp_20_reg_1257);
assign pixelOutXB_3_fu_684_p2 = (pixelOutXB_3_fu_684_p0 + pixelOutXB_fu_94);
assign pixelOutXB_4_fu_1000_p3 = ((tmp_4_fu_994_p2)? min5_cast_fu_990_p1: pixelOutXB_1_reg_273);
assign pixelOutXG_3_fu_675_p0 = $signed(tmp_19_reg_1252);
assign pixelOutXG_3_fu_675_p2 = (pixelOutXG_3_fu_675_p0 + pixelOutXG_fu_102);
assign pixelOutXR_3_fu_666_p0 = $signed(tmp_18_reg_1247);
assign pixelOutXR_3_fu_666_p2 = (pixelOutXR_3_fu_666_p0 + pixelOutXR_fu_110);
assign pixelOutYB_3_fu_657_p0 = $signed(tmp_17_reg_1242);
assign pixelOutYB_3_fu_657_p2 = (pixelOutYB_3_fu_657_p0 + pixelOutYB_fu_98);
assign pixelOutYB_4_fu_856_p3 = ((tmp_3_fu_850_p2)? min2_cast_fu_846_p1: pixelOutYB_1_reg_262);
assign pixelOutYG_3_fu_648_p0 = $signed(tmp_16_reg_1237);
assign pixelOutYG_3_fu_648_p2 = (pixelOutYG_3_fu_648_p0 + pixelOutYG_fu_114);
assign pixelOutYR_3_fu_639_p0 = $signed(tmp_14_reg_1232);
assign pixelOutYR_3_fu_639_p2 = (pixelOutYR_3_fu_639_p0 + pixelOutYR_fu_106);
assign tmp3_fu_397_p2 = (icmp_fu_385_p2 & icmp1_reg_1039);
assign tmp4_fu_402_p2 = (tmp_5_fu_391_p2 & tmp_6_reg_1044);
assign tmp5_fu_1008_p2 = (iftmp_s_fu_758_p3 | pixelOutYB_4_fu_856_p3);
assign tmp6_fu_1021_p2 = (iftmp_2_fu_902_p3 | pixelOutXB_4_fu_1000_p3);
assign tmp_11_cast_fu_485_p1 = $unsigned(countX_reg_207);
assign tmp_11_fu_720_p3 = pixelOutYR_1_reg_240[ap_const_lv32_17];
assign tmp_12_cast_fu_489_p1 = $unsigned(countX_reg_207);
assign tmp_12_fu_493_p2 = (tmp_7_reg_1099 + tmp_12_cast_fu_489_p1);
assign tmp_13_cast_cast_fu_498_p1 = $unsigned(tmp_12_fu_493_p2);
assign tmp_13_fu_728_p4 = {{pixelOutYR_1_reg_240[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_15_fu_766_p3 = pixelOutYG_1_reg_218[ap_const_lv32_17];
assign tmp_17_cast_cast_fu_597_p1 = $unsigned(tmp_33_reg_1190);
assign tmp_19_cast_cast_fu_606_p1 = $unsigned(aux_cast_reg_1175);
assign tmp_1_cast1_fu_331_p1 = grp_fu_303_p2[9:0];
assign tmp_1_cast_fu_335_p1 = grp_fu_303_p2[10:0];
assign tmp_21_fu_774_p4 = {{pixelOutYG_1_reg_218[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_22_fu_812_p3 = pixelOutYB_1_reg_262[ap_const_lv32_17];
assign tmp_23_fu_820_p4 = {{pixelOutYB_1_reg_262[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_24_fu_864_p3 = pixelOutXR_1_reg_229[ap_const_lv32_17];
assign tmp_25_fu_872_p4 = {{pixelOutXR_1_reg_229[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_26_fu_910_p3 = pixelOutXG_1_reg_251[ap_const_lv32_17];
assign tmp_27_fu_918_p4 = {{pixelOutXG_1_reg_251[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_28_fu_956_p3 = pixelOutXB_1_reg_273[ap_const_lv32_17];
assign tmp_29_fu_964_p4 = {{pixelOutXB_1_reg_273[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_2_cast_fu_361_p1 = pixelColumnCount[10:0];
assign tmp_2_fu_375_p4 = {{pixelColumnCount[ap_const_lv32_17 : ap_const_lv32_1]}};
assign tmp_30_fu_539_p1 = $unsigned(countY_reg_195);
assign tmp_32_fu_588_p1 = $unsigned(tmp_31_reg_1185);
assign tmp_3_fu_850_p2 = (tmp_22_fu_812_p3 | icmp4_fu_830_p2);
assign tmp_4_fu_994_p2 = (tmp_28_fu_956_p3 | icmp7_fu_974_p2);
assign tmp_5_fu_391_p2 = ($signed(pixelColumnCount) < $signed(24'b000000000000000111111111)? 1'b1: 1'b0);
assign tmp_6_fu_325_p2 = ($signed(pixelLineCount) < $signed(24'b000000000000000111111111)? 1'b1: 1'b0);
assign tmp_7_fu_417_p2 = (minbit_trunc_cast_fu_413_p1 + ap_const_lv9_1FC);
assign tmp_9_cast1_fu_469_p1 = $unsigned(countY_reg_195);
assign tmp_9_cast_fu_465_p1 = $unsigned(countY_reg_195);
assign tmp_9_fu_309_p4 = {{pixelLineCount[ap_const_lv32_17 : ap_const_lv32_1]}};
always @ (posedge ap_clk)
begin
    pixelLine_addr8_cast_reg_1049[6:0] <= 7'b0000000;
    tmp_9_cast_reg_1142[3:2] <= 2'b00;
    tmp_9_cast1_reg_1147[8:2] <= 7'b0000000;
end



endmodule //sobel

