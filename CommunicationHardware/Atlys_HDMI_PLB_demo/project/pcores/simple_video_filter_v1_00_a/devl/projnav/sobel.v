// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.4
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel,hls_ip_2012_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc6slx45tfgg484-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.110000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=374,HLS_SYN_LUT=1063}" *)

module sobel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mode,
        pixel,
        pixelColumnCount,
        pixelLineCount,
        filteredXPixel,
        filteredXPixel_ap_vld,
        filteredYPixel,
        filteredYPixel_ap_vld
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] mode;
input  [23:0] pixel;
input  [23:0] pixelColumnCount;
input  [23:0] pixelLineCount;
output  [23:0] filteredXPixel;
output   filteredXPixel_ap_vld;
output  [23:0] filteredYPixel;
output   filteredYPixel_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[23:0] filteredXPixel;
reg filteredXPixel_ap_vld;
reg[23:0] filteredYPixel;
reg filteredYPixel_ap_vld;
reg   [2:0] ap_CS_fsm = 3'b000;
reg   [10:0] pixelLine_address0;
reg    pixelLine_ce0;
reg    pixelLine_we0;
wire   [23:0] pixelLine_d0;
wire   [23:0] pixelLine_q0;
reg   [23:0] countY = 24'b000000000000000000000000;
wire   [3:0] filterYConstants_address0;
reg    filterYConstants_ce0;
wire   [2:0] filterYConstants_q0;
reg   [23:0] pixelOutYR = 24'b000000000000000000000000;
reg   [23:0] pixelOutYG = 24'b000000000000000000000000;
reg   [23:0] pixelOutYB = 24'b000000000000000000000000;
wire   [3:0] filterXConstants_address0;
reg    filterXConstants_ce0;
wire   [2:0] filterXConstants_q0;
reg   [23:0] pixelOutXR = 24'b000000000000000000000000;
reg   [23:0] pixelOutXG = 24'b000000000000000000000000;
reg   [23:0] pixelOutXB = 24'b000000000000000000000000;
wire   [0:0] tmp_fu_290_p2;
reg   [0:0] tmp_reg_1115;
wire   [0:0] tmp_3_fu_296_p2;
reg   [0:0] tmp_3_reg_1119;
wire   [0:0] tmp_6_fu_302_p2;
reg   [0:0] tmp_6_reg_1123;
wire   [0:0] or_cond5_fu_364_p2;
reg   [0:0] or_cond5_reg_1127;
wire   [8:0] tmp_7_fu_374_p2;
reg   [8:0] tmp_7_reg_1131;
wire   [1:0] tmp_36_fu_882_p2;
reg   [1:0] tmp_36_reg_1147;
wire   [0:0] exitcond_fu_876_p2;
wire   [23:0] tmp_37_fu_974_p2;
wire   [7:0] pixelLine_load_1_cast8_fu_980_p1;
reg   [7:0] pixelLine_load_1_cast8_reg_1172;
reg   [2:0] filterYConstants_load_reg_1177;
reg   [7:0] tmp_59_reg_1182;
reg   [7:0] tmp_61_reg_1187;
reg   [2:0] filterXConstants_load_reg_1192;
wire   [12:0] filterYConstants_load_cast_fu_1004_p1;
wire   [12:0] tmp_60_fu_1007_p1;
wire   [12:0] tmp_24_cast_cast_fu_1016_p1;
wire   [12:0] tmp_27_cast_cast_fu_1025_p1;
wire   [12:0] filterXConstants_load_cast_fu_1034_p1;
wire   [12:0] grp_fu_1010_p2;
reg   [12:0] tmp_21_reg_1229;
wire   [12:0] grp_fu_1019_p2;
reg   [12:0] tmp_25_reg_1234;
wire   [12:0] grp_fu_1028_p2;
reg   [12:0] tmp_28_reg_1239;
wire   [12:0] grp_fu_1037_p2;
reg   [12:0] tmp_30_reg_1244;
wire   [12:0] grp_fu_1043_p2;
reg   [12:0] tmp_32_reg_1249;
wire   [12:0] grp_fu_1049_p2;
reg   [12:0] tmp_34_reg_1254;
reg   [23:0] storemerge_reg_266;
reg   [1:0] tmp_13_reg_278;
wire   [0:0] tmp_8_fu_462_p2;
wire   [31:0] pixelLine_addr8_cast_fu_416_p1;
wire   [31:0] pixelLine_addr1_cast_fu_457_p1;
wire   [31:0] pixelLine_addr6_cast_fu_937_p1;
wire   [31:0] filterYConstants_addr4_cast_fu_968_p1;
wire   [23:0] tmp_12_fu_512_p3;
wire   [23:0] tmp_22_fu_1058_p2;
wire   [23:0] tmp_15_fu_565_p3;
wire   [23:0] tmp_26_fu_1068_p2;
wire   [23:0] tmp_24_fu_618_p3;
wire   [23:0] tmp_29_fu_1078_p2;
wire   [23:0] pixelOutXR_load_2_fu_671_p3;
wire   [23:0] tmp_31_fu_1088_p2;
wire   [23:0] pixelOutXG_load_2_fu_724_p3;
wire   [23:0] tmp_33_fu_1098_p2;
wire   [23:0] iftmp_2_fu_777_p3;
wire   [23:0] tmp_35_fu_1108_p2;
wire   [23:0] tmp_45_fu_869_p2;
wire   [23:0] tmp_42_fu_824_p2;
wire   [22:0] tmp_1_fu_308_p4;
wire   [22:0] tmp_2_fu_324_p4;
wire   [0:0] icmp_fu_318_p2;
wire   [0:0] icmp1_fu_334_p2;
wire   [0:0] tmp_9_fu_340_p2;
wire   [0:0] tmp_s_fu_346_p2;
wire   [0:0] tmp4_fu_358_p2;
wire   [0:0] tmp3_fu_352_p2;
wire   [8:0] minbit_trunc_cast_fu_370_p1;
wire   [11:0] tmp_4_cast_fu_380_p1;
wire   [11:0] p_shl2_fu_388_p2;
wire   [11:0] p_shl3_fu_394_p2;
wire   [11:0] pixelLine_addr7_fu_400_p2;
wire   [10:0] pixelLine_addr7_cast_fu_406_p1;
wire   [10:0] tmp_5_cast_fu_384_p1;
wire   [10:0] pixelLine_addr8_fu_410_p2;
wire   [11:0] tmp_1_cast_fu_421_p1;
wire   [11:0] p_shl_fu_429_p2;
wire   [11:0] p_shl1_fu_435_p2;
wire   [11:0] pixelLine_addr9_fu_441_p2;
wire   [10:0] pixelLine_addr9_cast_fu_447_p1;
wire   [10:0] tmp_2_cast_fu_425_p1;
wire   [10:0] pixelLine_addr1_fu_451_p2;
wire   [15:0] tmp_5_fu_468_p4;
wire   [0:0] tmp_10_fu_484_p3;
wire   [0:0] not_signbit1_fu_492_p2;
wire   [7:0] min_cast_fu_502_p0;
wire   [0:0] icmp2_fu_478_p2;
wire   [0:0] tmp_11_fu_506_p2;
wire   [23:0] min_cast_fu_502_p1;
wire   [15:0] tmp_17_fu_521_p4;
wire   [0:0] tmp_18_fu_537_p3;
wire   [0:0] not_signbit3_fu_545_p2;
wire   [7:0] min1_cast_fu_555_p0;
wire   [0:0] icmp3_fu_531_p2;
wire   [0:0] tmp_14_fu_559_p2;
wire   [23:0] min1_cast_fu_555_p1;
wire   [15:0] tmp_20_fu_574_p4;
wire   [0:0] tmp_23_fu_590_p3;
wire   [0:0] not_signbit5_fu_598_p2;
wire   [7:0] min2_cast_fu_608_p0;
wire   [0:0] icmp4_fu_584_p2;
wire   [0:0] tmp_16_fu_612_p2;
wire   [23:0] min2_cast_fu_608_p1;
wire   [15:0] tmp_40_fu_627_p4;
wire   [0:0] tmp_43_fu_643_p3;
wire   [0:0] not_signbit7_fu_651_p2;
wire   [7:0] min3_cast_fu_661_p0;
wire   [0:0] icmp5_fu_637_p2;
wire   [0:0] tmp_27_fu_665_p2;
wire   [23:0] min3_cast_fu_661_p1;
wire   [15:0] tmp_46_fu_680_p4;
wire   [0:0] tmp_47_fu_696_p3;
wire   [0:0] not_signbit9_fu_704_p2;
wire   [7:0] min4_cast_fu_714_p0;
wire   [0:0] icmp6_fu_690_p2;
wire   [0:0] tmp_38_fu_718_p2;
wire   [23:0] min4_cast_fu_714_p1;
wire   [15:0] tmp_48_fu_733_p4;
wire   [0:0] tmp_49_fu_749_p3;
wire   [0:0] not_signbit_fu_757_p2;
wire   [7:0] min5_cast_fu_767_p0;
wire   [0:0] icmp7_fu_743_p2;
wire   [0:0] tmp_39_fu_771_p2;
wire   [23:0] min5_cast_fu_767_p1;
wire   [23:0] tmp_41_fu_786_p2;
wire   [7:0] tmp_50_fu_792_p1;
wire   [7:0] tmp_51_fu_796_p4;
wire   [7:0] tmp51_fu_806_p2;
wire   [23:0] tmp52_fu_812_p5;
wire   [23:0] tmp_44_fu_831_p2;
wire   [7:0] tmp_53_fu_837_p1;
wire   [7:0] tmp_52_fu_841_p4;
wire   [7:0] tmp54_fu_851_p2;
wire   [23:0] tmp55_fu_857_p5;
wire   [8:0] tmp_18_cast_fu_896_p1;
wire   [8:0] tmp_19_fu_900_p2;
wire   [11:0] tmp_17_cast_fu_888_p1;
wire   [11:0] p_shl4_fu_909_p2;
wire   [11:0] p_shl5_fu_915_p2;
wire   [11:0] pixelLine_addr5_fu_921_p2;
wire   [10:0] pixelLine_addr5_cast_fu_927_p1;
wire   [10:0] tmp_19_cast_cast_fu_905_p1;
wire   [10:0] pixelLine_addr6_fu_931_p2;
wire   [3:0] tmp_56_fu_942_p1;
wire   [3:0] tmp_57_fu_946_p2;
wire   [3:0] tmp_58_fu_952_p1;
wire   [3:0] filterYConstants_addr3_cast_fu_956_p2;
wire   [3:0] tmp_18_cast1_fu_892_p1;
wire   [3:0] filterYConstants_addr4_fu_962_p2;
wire   [7:0] grp_fu_1010_p0;
wire   [2:0] grp_fu_1010_p1;
wire   [7:0] grp_fu_1019_p0;
wire   [2:0] grp_fu_1019_p1;
wire   [7:0] grp_fu_1028_p0;
wire   [2:0] grp_fu_1028_p1;
wire   [7:0] grp_fu_1037_p0;
wire   [2:0] grp_fu_1037_p1;
wire   [7:0] grp_fu_1043_p0;
wire   [2:0] grp_fu_1043_p1;
wire   [7:0] grp_fu_1049_p0;
wire   [2:0] grp_fu_1049_p1;
wire   [23:0] tmp_22_fu_1058_p0;
wire   [23:0] tmp_26_fu_1068_p0;
wire   [23:0] tmp_29_fu_1078_p0;
wire   [23:0] tmp_31_fu_1088_p0;
wire   [23:0] tmp_33_fu_1098_p0;
wire   [23:0] tmp_35_fu_1108_p0;
wire    grp_fu_1010_ce;
wire    grp_fu_1019_ce;
wire    grp_fu_1028_ce;
wire    grp_fu_1037_ce;
wire    grp_fu_1043_ce;
wire    grp_fu_1049_ce;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b001;
parameter    ap_ST_st3_fsm_2 = 3'b010;
parameter    ap_ST_st4_fsm_3 = 3'b011;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_ST_st6_fsm_5 = 3'b101;
parameter    ap_ST_st7_fsm_6 = 3'b110;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv16_1 = 16'b0000000000000001;
parameter    ap_const_lv16_2 = 16'b0000000000000010;
parameter    ap_const_lv32_1 = 32'b00000000000000000000000000000001;
parameter    ap_const_lv32_17 = 32'b00000000000000000000000000010111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv24_1FF = 24'b000000000000000111111111;
parameter    ap_const_lv9_1FC = 9'b111111100;
parameter    ap_const_lv12_9 = 12'b000000001001;
parameter    ap_const_lv12_7 = 12'b000000000111;
parameter    ap_const_lv24_3 = 24'b000000000000000000000011;
parameter    ap_const_lv32_8 = 32'b00000000000000000000000000001000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv24_8 = 24'b000000000000000000001000;
parameter    ap_const_lv32_10 = 32'b00000000000000000000000000010000;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b01;
parameter    ap_const_lv4_2 = 4'b0010;
parameter    ap_const_lv24_1 = 24'b000000000000000000000001;
parameter    ap_const_lv32_F = 32'b00000000000000000000000000001111;
parameter    ap_true = 1'b1;


sobel_pixelLine #(
    .DataWidth( 24 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
pixelLine_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( pixelLine_address0 ),
    .ce0( pixelLine_ce0 ),
    .we0( pixelLine_we0 ),
    .d0( pixelLine_d0 ),
    .q0( pixelLine_q0 )
);

sobel_filterYConstants #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
filterYConstants_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( filterYConstants_address0 ),
    .ce0( filterYConstants_ce0 ),
    .q0( filterYConstants_q0 )
);

sobel_filterXConstants #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
filterXConstants_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( filterXConstants_address0 ),
    .ce0( filterXConstants_ce0 ),
    .q0( filterXConstants_q0 )
);

sobel_mul_8ns_3s_13_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 13 ))
sobel_mul_8ns_3s_13_2_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_1010_p0 ),
    .din1( grp_fu_1010_p1 ),
    .ce( grp_fu_1010_ce ),
    .dout( grp_fu_1010_p2 )
);

sobel_mul_8ns_3s_13_2 #(
    .ID( 2 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 13 ))
sobel_mul_8ns_3s_13_2_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_1019_p0 ),
    .din1( grp_fu_1019_p1 ),
    .ce( grp_fu_1019_ce ),
    .dout( grp_fu_1019_p2 )
);

sobel_mul_8ns_3s_13_2 #(
    .ID( 3 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 13 ))
sobel_mul_8ns_3s_13_2_U3(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_1028_p0 ),
    .din1( grp_fu_1028_p1 ),
    .ce( grp_fu_1028_ce ),
    .dout( grp_fu_1028_p2 )
);

sobel_mul_8ns_3s_13_2 #(
    .ID( 4 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 13 ))
sobel_mul_8ns_3s_13_2_U4(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_1037_p0 ),
    .din1( grp_fu_1037_p1 ),
    .ce( grp_fu_1037_ce ),
    .dout( grp_fu_1037_p2 )
);

sobel_mul_8ns_3s_13_2 #(
    .ID( 5 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 13 ))
sobel_mul_8ns_3s_13_2_U5(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_1043_p0 ),
    .din1( grp_fu_1043_p1 ),
    .ce( grp_fu_1043_ce ),
    .dout( grp_fu_1043_p2 )
);

sobel_mul_8ns_3s_13_2 #(
    .ID( 6 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 13 ))
sobel_mul_8ns_3s_13_2_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_1049_p0 ),
    .din1( grp_fu_1049_p1 ),
    .ce( grp_fu_1049_ce ),
    .dout( grp_fu_1049_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & ~(ap_const_lv1_0 == or_cond5_reg_1127))) begin
        countY <= storemerge_reg_266;
    end
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        filterXConstants_load_reg_1192 <= filterXConstants_q0;
    end
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        filterYConstants_load_reg_1177 <= filterYConstants_q0;
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0) & (tmp_3_fu_296_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_fu_302_p2))) begin
        or_cond5_reg_1127 <= or_cond5_fu_364_p2;
    end
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        pixelLine_load_1_cast8_reg_1172 <= pixelLine_load_1_cast8_fu_980_p1;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutXB <= tmp_35_fu_1108_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == or_cond5_reg_1127)) | ((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == tmp_8_fu_462_p2))))) begin
        pixelOutXB <= iftmp_2_fu_777_p3;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutXG <= tmp_33_fu_1098_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == or_cond5_reg_1127)) | ((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == tmp_8_fu_462_p2))))) begin
        pixelOutXG <= pixelOutXG_load_2_fu_724_p3;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutXR <= tmp_31_fu_1088_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == or_cond5_reg_1127)) | ((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == tmp_8_fu_462_p2))))) begin
        pixelOutXR <= pixelOutXR_load_2_fu_671_p3;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutYB <= tmp_29_fu_1078_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == or_cond5_reg_1127)) | ((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == tmp_8_fu_462_p2))))) begin
        pixelOutYB <= tmp_24_fu_618_p3;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutYG <= tmp_26_fu_1068_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == or_cond5_reg_1127)) | ((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == tmp_8_fu_462_p2))))) begin
        pixelOutYG <= tmp_15_fu_565_p3;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutYR <= tmp_22_fu_1058_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == or_cond5_reg_1127)) | ((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == tmp_8_fu_462_p2))))) begin
        pixelOutYR <= tmp_12_fu_512_p3;
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0) & (tmp_3_fu_296_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_fu_302_p2) & ~(ap_const_lv1_0 == or_cond5_fu_364_p2))) begin
        storemerge_reg_266 <= ap_const_lv24_0;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_876_p2))) begin
        storemerge_reg_266 <= tmp_37_fu_974_p2;
    end
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & ~(ap_const_lv1_0 == or_cond5_reg_1127) & ~(ap_const_lv1_0 == tmp_8_fu_462_p2))) begin
        tmp_13_reg_278 <= ap_const_lv2_0;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        tmp_13_reg_278 <= tmp_36_reg_1147;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_21_reg_1229 <= grp_fu_1010_p2;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_25_reg_1234 <= grp_fu_1019_p2;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_28_reg_1239 <= grp_fu_1028_p2;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_30_reg_1244 <= grp_fu_1037_p2;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_32_reg_1249 <= grp_fu_1043_p2;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_34_reg_1254 <= grp_fu_1049_p2;
    end
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        tmp_36_reg_1147 <= tmp_36_fu_882_p2;
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0))) begin
        tmp_3_reg_1119 <= tmp_3_fu_296_p2;
    end
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        tmp_59_reg_1182 <= {{pixelLine_q0[ap_const_lv32_17 : ap_const_lv32_10]}};
    end
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        tmp_61_reg_1187 <= {{pixelLine_q0[ap_const_lv32_F : ap_const_lv32_8]}};
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0) & (tmp_3_fu_296_p2 == ap_const_lv1_0))) begin
        tmp_6_reg_1123 <= tmp_6_fu_302_p2;
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0) & (tmp_3_fu_296_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_fu_302_p2) & ~(ap_const_lv1_0 == or_cond5_fu_364_p2))) begin
        tmp_7_reg_1131 <= tmp_7_fu_374_p2;
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        tmp_reg_1115 <= tmp_fu_290_p2;
    end
end

/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_reg_1115 or tmp_3_reg_1119 or tmp_6_reg_1123 or or_cond5_reg_1127 or exitcond_fu_876_p2 or tmp_8_fu_462_p2)
begin
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st7_fsm_6;
    end else if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st6_fsm_5;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st5_fsm_4;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_876_p2))) begin
        ap_NS_fsm = ap_ST_st4_fsm_3;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_6_reg_1123) | (ap_const_lv1_0 == or_cond5_reg_1127) | (ap_const_lv1_0 == tmp_8_fu_462_p2) | ~(tmp_reg_1115 == ap_const_lv1_0) | ~(tmp_3_reg_1119 == ap_const_lv1_0)))) begin
        ap_NS_fsm = ap_ST_st1_fsm_0;
    end else if (((ap_ST_st7_fsm_6 == ap_CS_fsm) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & ~(ap_const_lv1_0 == or_cond5_reg_1127) & ~(ap_const_lv1_0 == tmp_8_fu_462_p2)))) begin
        ap_NS_fsm = ap_ST_st3_fsm_2;
    end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_876_p2)))) begin
        ap_NS_fsm = ap_ST_st2_fsm_1;
    end else begin
        ap_NS_fsm = ap_CS_fsm;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or tmp_reg_1115 or tmp_3_reg_1119 or tmp_6_reg_1123 or or_cond5_reg_1127 or tmp_8_fu_462_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_6_reg_1123) | (ap_const_lv1_0 == or_cond5_reg_1127) | (ap_const_lv1_0 == tmp_8_fu_462_p2) | ~(tmp_reg_1115 == ap_const_lv1_0) | ~(tmp_3_reg_1119 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp_reg_1115 or tmp_3_reg_1119 or tmp_6_reg_1123 or or_cond5_reg_1127 or tmp_8_fu_462_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_6_reg_1123) | (ap_const_lv1_0 == or_cond5_reg_1127) | (ap_const_lv1_0 == tmp_8_fu_462_p2) | ~(tmp_reg_1115 == ap_const_lv1_0) | ~(tmp_3_reg_1119 == ap_const_lv1_0)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// filterXConstants_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_876_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_876_p2))) begin
        filterXConstants_ce0 = ap_const_logic_1;
    end else begin
        filterXConstants_ce0 = ap_const_logic_0;
    end
end

/// filterYConstants_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_876_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_876_p2))) begin
        filterYConstants_ce0 = ap_const_logic_1;
    end else begin
        filterYConstants_ce0 = ap_const_logic_0;
    end
end

/// filteredXPixel assign process. ///
always @ (ap_start or ap_CS_fsm or pixelLine_q0 or tmp_fu_290_p2 or tmp_reg_1115 or tmp_3_fu_296_p2 or tmp_3_reg_1119 or tmp_6_reg_1123 or or_cond5_reg_1127 or tmp_8_fu_462_p2 or tmp_45_fu_869_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_reg_1115 == ap_const_lv1_0))) begin
        filteredXPixel = pixelLine_q0;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == or_cond5_reg_1127)) | ((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == tmp_8_fu_462_p2))))) begin
        filteredXPixel = tmp_45_fu_869_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0) & ~(tmp_3_fu_296_p2 == ap_const_lv1_0))) begin
        filteredXPixel = ap_const_lv24_0;
    end else begin
        filteredXPixel = tmp_45_fu_869_p2;
    end
end

/// filteredXPixel_ap_vld assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_290_p2 or tmp_reg_1115 or tmp_3_fu_296_p2 or tmp_3_reg_1119 or tmp_6_reg_1123 or or_cond5_reg_1127 or tmp_8_fu_462_p2)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == or_cond5_reg_1127)) | ((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == tmp_8_fu_462_p2)))) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0) & ~(tmp_3_fu_296_p2 == ap_const_lv1_0)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_reg_1115 == ap_const_lv1_0)))) begin
        filteredXPixel_ap_vld = ap_const_logic_1;
    end else begin
        filteredXPixel_ap_vld = ap_const_logic_0;
    end
end

/// filteredYPixel assign process. ///
always @ (ap_start or ap_CS_fsm or pixelLine_q0 or tmp_fu_290_p2 or tmp_reg_1115 or tmp_3_fu_296_p2 or tmp_3_reg_1119 or tmp_6_reg_1123 or or_cond5_reg_1127 or tmp_8_fu_462_p2 or tmp_42_fu_824_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_reg_1115 == ap_const_lv1_0))) begin
        filteredYPixel = pixelLine_q0;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == or_cond5_reg_1127)) | ((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == tmp_8_fu_462_p2))))) begin
        filteredYPixel = tmp_42_fu_824_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0) & ~(tmp_3_fu_296_p2 == ap_const_lv1_0))) begin
        filteredYPixel = ap_const_lv24_0;
    end else begin
        filteredYPixel = tmp_42_fu_824_p2;
    end
end

/// filteredYPixel_ap_vld assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_290_p2 or tmp_reg_1115 or tmp_3_fu_296_p2 or tmp_3_reg_1119 or tmp_6_reg_1123 or or_cond5_reg_1127 or tmp_8_fu_462_p2)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == or_cond5_reg_1127)) | ((tmp_reg_1115 == ap_const_lv1_0) & (tmp_3_reg_1119 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1123) & (ap_const_lv1_0 == tmp_8_fu_462_p2)))) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0) & ~(tmp_3_fu_296_p2 == ap_const_lv1_0)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_reg_1115 == ap_const_lv1_0)))) begin
        filteredYPixel_ap_vld = ap_const_logic_1;
    end else begin
        filteredYPixel_ap_vld = ap_const_logic_0;
    end
end

/// pixelLine_address0 assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_290_p2 or tmp_3_fu_296_p2 or exitcond_fu_876_p2 or pixelLine_addr8_cast_fu_416_p1 or pixelLine_addr1_cast_fu_457_p1 or pixelLine_addr6_cast_fu_937_p1)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0) & ~(tmp_3_fu_296_p2 == ap_const_lv1_0))) begin
        pixelLine_address0 = pixelLine_addr8_cast_fu_416_p1;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_876_p2))) begin
        pixelLine_address0 = pixelLine_addr6_cast_fu_937_p1;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_290_p2 == ap_const_lv1_0))) begin
        pixelLine_address0 = pixelLine_addr1_cast_fu_457_p1;
    end else begin
        pixelLine_address0 = pixelLine_addr8_cast_fu_416_p1;
    end
end

/// pixelLine_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_290_p2 or tmp_3_fu_296_p2 or exitcond_fu_876_p2)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_290_p2 == ap_const_lv1_0)) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_876_p2)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0) & ~(tmp_3_fu_296_p2 == ap_const_lv1_0)))) begin
        pixelLine_ce0 = ap_const_logic_1;
    end else begin
        pixelLine_ce0 = ap_const_logic_0;
    end
end

/// pixelLine_we0 assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_290_p2 or tmp_3_fu_296_p2)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_290_p2 == ap_const_lv1_0) & ~(tmp_3_fu_296_p2 == ap_const_lv1_0))) begin
        pixelLine_we0 = ap_const_logic_1;
    end else begin
        pixelLine_we0 = ap_const_logic_0;
    end
end
assign exitcond_fu_876_p2 = (tmp_13_reg_278 == ap_const_lv2_3? 1'b1: 1'b0);
assign filterXConstants_address0 = filterYConstants_addr4_cast_fu_968_p1;
assign filterXConstants_load_cast_fu_1034_p1 = $signed(filterXConstants_load_reg_1192);
assign filterYConstants_addr3_cast_fu_956_p2 = (tmp_57_fu_946_p2 - tmp_58_fu_952_p1);
assign filterYConstants_addr4_cast_fu_968_p1 = $unsigned(filterYConstants_addr4_fu_962_p2);
assign filterYConstants_addr4_fu_962_p2 = (filterYConstants_addr3_cast_fu_956_p2 + tmp_18_cast1_fu_892_p1);
assign filterYConstants_address0 = filterYConstants_addr4_cast_fu_968_p1;
assign filterYConstants_load_cast_fu_1004_p1 = $signed(filterYConstants_load_reg_1177);
assign grp_fu_1010_ce = ap_const_logic_1;
assign grp_fu_1010_p0 = tmp_60_fu_1007_p1;
assign grp_fu_1010_p1 = filterYConstants_load_cast_fu_1004_p1;
assign grp_fu_1019_ce = ap_const_logic_1;
assign grp_fu_1019_p0 = tmp_24_cast_cast_fu_1016_p1;
assign grp_fu_1019_p1 = filterYConstants_load_cast_fu_1004_p1;
assign grp_fu_1028_ce = ap_const_logic_1;
assign grp_fu_1028_p0 = tmp_27_cast_cast_fu_1025_p1;
assign grp_fu_1028_p1 = filterYConstants_load_cast_fu_1004_p1;
assign grp_fu_1037_ce = ap_const_logic_1;
assign grp_fu_1037_p0 = tmp_60_fu_1007_p1;
assign grp_fu_1037_p1 = filterXConstants_load_cast_fu_1034_p1;
assign grp_fu_1043_ce = ap_const_logic_1;
assign grp_fu_1043_p0 = tmp_24_cast_cast_fu_1016_p1;
assign grp_fu_1043_p1 = filterXConstants_load_cast_fu_1034_p1;
assign grp_fu_1049_ce = ap_const_logic_1;
assign grp_fu_1049_p0 = tmp_27_cast_cast_fu_1025_p1;
assign grp_fu_1049_p1 = filterXConstants_load_cast_fu_1034_p1;
assign icmp1_fu_334_p2 = ($signed(tmp_2_fu_324_p4) > $signed(23'b00000000000000000000000)? 1'b1: 1'b0);
assign icmp2_fu_478_p2 = ($signed(tmp_5_fu_468_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp3_fu_531_p2 = ($signed(tmp_17_fu_521_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp4_fu_584_p2 = ($signed(tmp_20_fu_574_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp5_fu_637_p2 = ($signed(tmp_40_fu_627_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp6_fu_690_p2 = ($signed(tmp_46_fu_680_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp7_fu_743_p2 = ($signed(tmp_48_fu_733_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp_fu_318_p2 = ($signed(tmp_1_fu_308_p4) > $signed(23'b00000000000000000000000)? 1'b1: 1'b0);
assign iftmp_2_fu_777_p3 = ((tmp_39_fu_771_p2)? min5_cast_fu_767_p1: pixelOutXB);
assign min1_cast_fu_555_p0 = $signed(not_signbit3_fu_545_p2);
assign min1_cast_fu_555_p1 = $unsigned(min1_cast_fu_555_p0);
assign min2_cast_fu_608_p0 = $signed(not_signbit5_fu_598_p2);
assign min2_cast_fu_608_p1 = $unsigned(min2_cast_fu_608_p0);
assign min3_cast_fu_661_p0 = $signed(not_signbit7_fu_651_p2);
assign min3_cast_fu_661_p1 = $unsigned(min3_cast_fu_661_p0);
assign min4_cast_fu_714_p0 = $signed(not_signbit9_fu_704_p2);
assign min4_cast_fu_714_p1 = $unsigned(min4_cast_fu_714_p0);
assign min5_cast_fu_767_p0 = $signed(not_signbit_fu_757_p2);
assign min5_cast_fu_767_p1 = $unsigned(min5_cast_fu_767_p0);
assign min_cast_fu_502_p0 = $signed(not_signbit1_fu_492_p2);
assign min_cast_fu_502_p1 = $unsigned(min_cast_fu_502_p0);
assign minbit_trunc_cast_fu_370_p1 = pixelColumnCount[8:0];
assign not_signbit1_fu_492_p2 = (tmp_10_fu_484_p3 ^ ap_const_lv1_1);
assign not_signbit3_fu_545_p2 = (tmp_18_fu_537_p3 ^ ap_const_lv1_1);
assign not_signbit5_fu_598_p2 = (tmp_23_fu_590_p3 ^ ap_const_lv1_1);
assign not_signbit7_fu_651_p2 = (tmp_43_fu_643_p3 ^ ap_const_lv1_1);
assign not_signbit9_fu_704_p2 = (tmp_47_fu_696_p3 ^ ap_const_lv1_1);
assign not_signbit_fu_757_p2 = (tmp_49_fu_749_p3 ^ ap_const_lv1_1);
assign or_cond5_fu_364_p2 = (tmp4_fu_358_p2 & tmp3_fu_352_p2);
assign p_shl1_fu_435_p2 = tmp_1_cast_fu_421_p1 << ap_const_lv12_7;
assign p_shl2_fu_388_p2 = tmp_4_cast_fu_380_p1 << ap_const_lv12_9;
assign p_shl3_fu_394_p2 = tmp_4_cast_fu_380_p1 << ap_const_lv12_7;
assign p_shl4_fu_909_p2 = tmp_17_cast_fu_888_p1 << ap_const_lv12_9;
assign p_shl5_fu_915_p2 = tmp_17_cast_fu_888_p1 << ap_const_lv12_7;
assign p_shl_fu_429_p2 = tmp_1_cast_fu_421_p1 << ap_const_lv12_9;
assign pixelLine_addr1_cast_fu_457_p1 = $unsigned(pixelLine_addr1_fu_451_p2);
assign pixelLine_addr1_fu_451_p2 = (pixelLine_addr9_cast_fu_447_p1 + tmp_2_cast_fu_425_p1);
assign pixelLine_addr5_cast_fu_927_p1 = pixelLine_addr5_fu_921_p2[10:0];
assign pixelLine_addr5_fu_921_p2 = (p_shl4_fu_909_p2 + p_shl5_fu_915_p2);
assign pixelLine_addr6_cast_fu_937_p1 = $unsigned(pixelLine_addr6_fu_931_p2);
assign pixelLine_addr6_fu_931_p2 = (pixelLine_addr5_cast_fu_927_p1 + tmp_19_cast_cast_fu_905_p1);
assign pixelLine_addr7_cast_fu_406_p1 = pixelLine_addr7_fu_400_p2[10:0];
assign pixelLine_addr7_fu_400_p2 = (p_shl2_fu_388_p2 + p_shl3_fu_394_p2);
assign pixelLine_addr8_cast_fu_416_p1 = $unsigned(pixelLine_addr8_fu_410_p2);
assign pixelLine_addr8_fu_410_p2 = (pixelLine_addr7_cast_fu_406_p1 + tmp_5_cast_fu_384_p1);
assign pixelLine_addr9_cast_fu_447_p1 = pixelLine_addr9_fu_441_p2[10:0];
assign pixelLine_addr9_fu_441_p2 = (p_shl_fu_429_p2 + p_shl1_fu_435_p2);
assign pixelLine_d0 = pixel;
assign pixelLine_load_1_cast8_fu_980_p1 = pixelLine_q0[7:0];
assign pixelOutXG_load_2_fu_724_p3 = ((tmp_38_fu_718_p2)? min4_cast_fu_714_p1: pixelOutXG);
assign pixelOutXR_load_2_fu_671_p3 = ((tmp_27_fu_665_p2)? min3_cast_fu_661_p1: pixelOutXR);
assign tmp3_fu_352_p2 = (icmp_fu_318_p2 & icmp1_fu_334_p2);
assign tmp4_fu_358_p2 = (tmp_9_fu_340_p2 & tmp_s_fu_346_p2);
assign tmp51_fu_806_p2 = (tmp_50_fu_792_p1 | tmp_51_fu_796_p4);
assign tmp52_fu_812_p5 = {{tmp51_fu_806_p2}, {tmp_41_fu_786_p2[32'd15 : 32'd0]}};
assign tmp54_fu_851_p2 = (tmp_53_fu_837_p1 | tmp_52_fu_841_p4);
assign tmp55_fu_857_p5 = {{tmp54_fu_851_p2}, {tmp_44_fu_831_p2[32'd15 : 32'd0]}};
assign tmp_10_fu_484_p3 = pixelOutYR[ap_const_lv32_17];
assign tmp_11_fu_506_p2 = (tmp_10_fu_484_p3 | icmp2_fu_478_p2);
assign tmp_12_fu_512_p3 = ((tmp_11_fu_506_p2)? min_cast_fu_502_p1: pixelOutYR);
assign tmp_14_fu_559_p2 = (tmp_18_fu_537_p3 | icmp3_fu_531_p2);
assign tmp_15_fu_565_p3 = ((tmp_14_fu_559_p2)? min1_cast_fu_555_p1: pixelOutYG);
assign tmp_16_fu_612_p2 = (tmp_23_fu_590_p3 | icmp4_fu_584_p2);
assign tmp_17_cast_fu_888_p1 = countY[11:0];
assign tmp_17_fu_521_p4 = {{pixelOutYG[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_18_cast1_fu_892_p1 = $unsigned(tmp_13_reg_278);
assign tmp_18_cast_fu_896_p1 = $unsigned(tmp_13_reg_278);
assign tmp_18_fu_537_p3 = pixelOutYG[ap_const_lv32_17];
assign tmp_19_cast_cast_fu_905_p1 = $unsigned(tmp_19_fu_900_p2);
assign tmp_19_fu_900_p2 = (tmp_7_reg_1131 + tmp_18_cast_fu_896_p1);
assign tmp_1_cast_fu_421_p1 = pixelLineCount[11:0];
assign tmp_1_fu_308_p4 = {{pixelColumnCount[ap_const_lv32_17 : ap_const_lv32_1]}};
assign tmp_20_fu_574_p4 = {{pixelOutYB[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_22_fu_1058_p0 = $signed(tmp_21_reg_1229);
assign tmp_22_fu_1058_p2 = (tmp_22_fu_1058_p0 + pixelOutYR);
assign tmp_23_fu_590_p3 = pixelOutYB[ap_const_lv32_17];
assign tmp_24_cast_cast_fu_1016_p1 = $unsigned(tmp_61_reg_1187);
assign tmp_24_fu_618_p3 = ((tmp_16_fu_612_p2)? min2_cast_fu_608_p1: pixelOutYB);
assign tmp_26_fu_1068_p0 = $signed(tmp_25_reg_1234);
assign tmp_26_fu_1068_p2 = (tmp_26_fu_1068_p0 + pixelOutYG);
assign tmp_27_cast_cast_fu_1025_p1 = $unsigned(pixelLine_load_1_cast8_reg_1172);
assign tmp_27_fu_665_p2 = (tmp_43_fu_643_p3 | icmp5_fu_637_p2);
assign tmp_29_fu_1078_p0 = $signed(tmp_28_reg_1239);
assign tmp_29_fu_1078_p2 = (tmp_29_fu_1078_p0 + pixelOutYB);
assign tmp_2_cast_fu_425_p1 = pixelColumnCount[10:0];
assign tmp_2_fu_324_p4 = {{pixelLineCount[ap_const_lv32_17 : ap_const_lv32_1]}};
assign tmp_31_fu_1088_p0 = $signed(tmp_30_reg_1244);
assign tmp_31_fu_1088_p2 = (tmp_31_fu_1088_p0 + pixelOutXR);
assign tmp_33_fu_1098_p0 = $signed(tmp_32_reg_1249);
assign tmp_33_fu_1098_p2 = (tmp_33_fu_1098_p0 + pixelOutXG);
assign tmp_35_fu_1108_p0 = $signed(tmp_34_reg_1254);
assign tmp_35_fu_1108_p2 = (tmp_35_fu_1108_p0 + pixelOutXB);
assign tmp_36_fu_882_p2 = (tmp_13_reg_278 + ap_const_lv2_1);
assign tmp_37_fu_974_p2 = (countY + ap_const_lv24_1);
assign tmp_38_fu_718_p2 = (tmp_47_fu_696_p3 | icmp6_fu_690_p2);
assign tmp_39_fu_771_p2 = (tmp_49_fu_749_p3 | icmp7_fu_743_p2);
assign tmp_3_fu_296_p2 = (mode == ap_const_lv16_1? 1'b1: 1'b0);
assign tmp_40_fu_627_p4 = {{pixelOutXR[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_41_fu_786_p2 = tmp_15_fu_565_p3 << ap_const_lv24_8;
assign tmp_42_fu_824_p2 = (tmp52_fu_812_p5 | tmp_24_fu_618_p3);
assign tmp_43_fu_643_p3 = pixelOutXR[ap_const_lv32_17];
assign tmp_44_fu_831_p2 = pixelOutXG_load_2_fu_724_p3 << ap_const_lv24_8;
assign tmp_45_fu_869_p2 = (tmp55_fu_857_p5 | iftmp_2_fu_777_p3);
assign tmp_46_fu_680_p4 = {{pixelOutXG[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_47_fu_696_p3 = pixelOutXG[ap_const_lv32_17];
assign tmp_48_fu_733_p4 = {{pixelOutXB[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_49_fu_749_p3 = pixelOutXB[ap_const_lv32_17];
assign tmp_4_cast_fu_380_p1 = pixelLineCount[11:0];
assign tmp_50_fu_792_p1 = tmp_12_fu_512_p3[7:0];
assign tmp_51_fu_796_p4 = {{tmp_41_fu_786_p2[ap_const_lv32_17 : ap_const_lv32_10]}};
assign tmp_52_fu_841_p4 = {{tmp_44_fu_831_p2[ap_const_lv32_17 : ap_const_lv32_10]}};
assign tmp_53_fu_837_p1 = pixelOutXR_load_2_fu_671_p3[7:0];
assign tmp_56_fu_942_p1 = countY[3:0];
assign tmp_57_fu_946_p2 = tmp_56_fu_942_p1 << ap_const_lv4_2;
assign tmp_58_fu_952_p1 = countY[3:0];
assign tmp_5_cast_fu_384_p1 = pixelColumnCount[10:0];
assign tmp_5_fu_468_p4 = {{pixelOutYR[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_60_fu_1007_p1 = $unsigned(tmp_59_reg_1182);
assign tmp_6_fu_302_p2 = (mode == ap_const_lv16_2? 1'b1: 1'b0);
assign tmp_7_fu_374_p2 = (minbit_trunc_cast_fu_370_p1 + ap_const_lv9_1FC);
assign tmp_8_fu_462_p2 = ($signed(storemerge_reg_266) < $signed(24'b000000000000000000000011)? 1'b1: 1'b0);
assign tmp_9_fu_340_p2 = ($signed(pixelColumnCount) < $signed(24'b000000000000000111111111)? 1'b1: 1'b0);
assign tmp_fu_290_p2 = (mode == ap_const_lv16_0? 1'b1: 1'b0);
assign tmp_s_fu_346_p2 = ($signed(pixelLineCount) < $signed(24'b000000000000000111111111)? 1'b1: 1'b0);


endmodule //sobel

