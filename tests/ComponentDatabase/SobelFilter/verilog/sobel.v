// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.4
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel,hls_ip_2012_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc6slx45tfgg484-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.110000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=375,HLS_SYN_LUT=951}" *)

module sobel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mode,
        pixel,
        pixelColumnCount,
        pixelLineCount,
        filteredXPixel,
        filteredXPixel_ap_vld,
        filteredYPixel,
        filteredYPixel_ap_vld
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] mode;
input  [23:0] pixel;
input  [23:0] pixelColumnCount;
input  [23:0] pixelLineCount;
output  [23:0] filteredXPixel;
output   filteredXPixel_ap_vld;
output  [23:0] filteredYPixel;
output   filteredYPixel_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[23:0] filteredXPixel;
reg filteredXPixel_ap_vld;
reg[23:0] filteredYPixel;
reg filteredYPixel_ap_vld;
reg   [2:0] ap_CS_fsm = 3'b000;
reg   [10:0] pixelLine_address0;
reg    pixelLine_ce0;
reg    pixelLine_we0;
wire   [23:0] pixelLine_d0;
wire   [23:0] pixelLine_q0;
reg   [23:0] countY = 24'b000000000000000000000000;
wire   [3:0] filterYConstants_address0;
reg    filterYConstants_ce0;
wire   [2:0] filterYConstants_q0;
reg   [23:0] pixelOutYR = 24'b000000000000000000000000;
reg   [23:0] pixelOutYG = 24'b000000000000000000000000;
reg   [23:0] pixelOutYB = 24'b000000000000000000000000;
wire   [3:0] filterXConstants_address0;
reg    filterXConstants_ce0;
wire   [2:0] filterXConstants_q0;
reg   [23:0] pixelOutXR = 24'b000000000000000000000000;
reg   [23:0] pixelOutXG = 24'b000000000000000000000000;
reg   [23:0] pixelOutXB = 24'b000000000000000000000000;
wire   [0:0] tmp_fu_282_p2;
reg   [0:0] tmp_reg_1041;
wire   [0:0] tmp_3_fu_288_p2;
reg   [0:0] tmp_3_reg_1045;
wire   [0:0] tmp_6_fu_294_p2;
reg   [0:0] tmp_6_reg_1049;
wire   [10:0] tmp_8_cast_fu_304_p2;
reg   [10:0] tmp_8_cast_reg_1053;
wire   [1:0] tmp_40_fu_812_p2;
reg   [1:0] tmp_40_reg_1069;
wire   [0:0] exitcond_fu_806_p2;
wire   [23:0] tmp_41_fu_900_p2;
reg   [7:0] tmp_51_reg_1094;
reg   [7:0] tmp_52_reg_1099;
wire   [7:0] tmp_24_fu_926_p1;
reg   [7:0] tmp_24_reg_1104;
reg   [2:0] filterYConstants_load_reg_1109;
reg   [2:0] filterXConstants_load_reg_1114;
wire   [12:0] filterYConstants_load_cast_fu_930_p1;
wire   [12:0] tmp_25_cast_fu_933_p1;
wire   [12:0] tmp_28_cast_fu_942_p1;
wire   [12:0] tmp_31_cast_fu_951_p1;
wire   [12:0] filterXConstants_load_cast_fu_960_p1;
wire   [12:0] grp_fu_936_p2;
reg   [12:0] tmp_26_reg_1151;
wire   [12:0] grp_fu_945_p2;
reg   [12:0] tmp_29_reg_1156;
wire   [12:0] grp_fu_954_p2;
reg   [12:0] tmp_32_reg_1161;
wire   [12:0] grp_fu_963_p2;
reg   [12:0] tmp_34_reg_1166;
wire   [12:0] grp_fu_969_p2;
reg   [12:0] tmp_36_reg_1171;
wire   [12:0] grp_fu_975_p2;
reg   [12:0] tmp_38_reg_1176;
reg   [23:0] storemerge_reg_258;
reg   [1:0] tmp_11_reg_270;
wire   [0:0] tmp_9_fu_392_p2;
wire   [31:0] pixelLine_addr8_cast_fu_346_p1;
wire   [31:0] pixelLine_addr1_cast_fu_387_p1;
wire   [31:0] pixelLine_addr6_cast_fu_863_p1;
wire   [31:0] filterYConstants_addr4_cast_fu_894_p1;
wire   [23:0] tmp_4_fu_442_p3;
wire   [23:0] tmp_27_fu_984_p2;
wire   [23:0] tmp_13_fu_495_p3;
wire   [23:0] tmp_30_fu_994_p2;
wire   [23:0] tmp_15_fu_548_p3;
wire   [23:0] tmp_33_fu_1004_p2;
wire   [23:0] pixelOutXR_load_2_fu_601_p3;
wire   [23:0] tmp_35_fu_1014_p2;
wire   [23:0] pixelOutXG_load_2_fu_654_p3;
wire   [23:0] tmp_37_fu_1024_p2;
wire   [23:0] iftmp_2_fu_707_p3;
wire   [23:0] tmp_39_fu_1034_p2;
wire   [23:0] tmp_46_fu_754_p2;
wire   [23:0] tmp_49_fu_799_p2;
wire   [10:0] tmp_7_fu_300_p1;
wire   [11:0] tmp_4_cast_fu_310_p1;
wire   [11:0] p_shl2_fu_318_p2;
wire   [11:0] p_shl3_fu_324_p2;
wire   [11:0] pixelLine_addr7_fu_330_p2;
wire   [10:0] pixelLine_addr7_cast_fu_336_p1;
wire   [10:0] tmp_5_cast_fu_314_p1;
wire   [10:0] pixelLine_addr8_fu_340_p2;
wire   [11:0] tmp_1_cast_fu_351_p1;
wire   [11:0] p_shl_fu_359_p2;
wire   [11:0] p_shl1_fu_365_p2;
wire   [11:0] pixelLine_addr9_fu_371_p2;
wire   [10:0] pixelLine_addr9_cast_fu_377_p1;
wire   [10:0] tmp_2_cast_fu_355_p1;
wire   [10:0] pixelLine_addr1_fu_381_p2;
wire   [15:0] tmp_1_fu_398_p4;
wire   [0:0] tmp_2_fu_414_p3;
wire   [0:0] not_signbit5_fu_422_p2;
wire   [7:0] min_cast_fu_432_p0;
wire   [0:0] icmp_fu_408_p2;
wire   [0:0] tmp_8_fu_436_p2;
wire   [23:0] min_cast_fu_432_p1;
wire   [15:0] tmp_5_fu_451_p4;
wire   [0:0] tmp_10_fu_467_p3;
wire   [0:0] not_signbit1_fu_475_p2;
wire   [7:0] min1_cast_fu_485_p0;
wire   [0:0] icmp8_fu_461_p2;
wire   [0:0] tmp_12_fu_489_p2;
wire   [23:0] min1_cast_fu_485_p1;
wire   [15:0] tmp_16_fu_504_p4;
wire   [0:0] tmp_17_fu_520_p3;
wire   [0:0] not_signbit3_fu_528_p2;
wire   [7:0] min2_cast_fu_538_p0;
wire   [0:0] icmp1_fu_514_p2;
wire   [0:0] tmp_14_fu_542_p2;
wire   [23:0] min2_cast_fu_538_p1;
wire   [15:0] tmp_20_fu_557_p4;
wire   [0:0] tmp_21_fu_573_p3;
wire   [0:0] not_signbit6_fu_581_p2;
wire   [7:0] min3_cast_fu_591_p0;
wire   [0:0] icmp2_fu_567_p2;
wire   [0:0] tmp_19_fu_595_p2;
wire   [23:0] min3_cast_fu_591_p1;
wire   [15:0] tmp_22_fu_610_p4;
wire   [0:0] tmp_23_fu_626_p3;
wire   [0:0] not_signbit8_fu_634_p2;
wire   [7:0] min4_cast_fu_644_p0;
wire   [0:0] icmp3_fu_620_p2;
wire   [0:0] tmp_25_fu_648_p2;
wire   [23:0] min4_cast_fu_644_p1;
wire   [15:0] tmp_28_fu_663_p4;
wire   [0:0] tmp_31_fu_679_p3;
wire   [0:0] not_signbit_fu_687_p2;
wire   [7:0] min5_cast_fu_697_p0;
wire   [0:0] icmp4_fu_673_p2;
wire   [0:0] tmp_42_fu_701_p2;
wire   [23:0] min5_cast_fu_697_p1;
wire   [23:0] tmp_43_fu_716_p2;
wire   [7:0] tmp_44_fu_722_p1;
wire   [7:0] tmp_45_fu_726_p4;
wire   [7:0] tmp45_fu_736_p2;
wire   [23:0] tmp46_fu_742_p5;
wire   [23:0] tmp_47_fu_761_p2;
wire   [7:0] tmp_48_fu_767_p1;
wire   [7:0] tmp_50_fu_771_p4;
wire   [7:0] tmp49_fu_781_p2;
wire   [23:0] tmp50_fu_787_p5;
wire   [10:0] tmp_17_cast_fu_826_p1;
wire   [11:0] tmp_16_cast_fu_818_p1;
wire   [11:0] p_shl4_fu_835_p2;
wire   [11:0] p_shl5_fu_841_p2;
wire   [11:0] pixelLine_addr5_fu_847_p2;
wire   [10:0] pixelLine_addr5_cast_fu_853_p1;
wire   [10:0] tmp_18_fu_830_p2;
wire   [10:0] pixelLine_addr6_fu_857_p2;
wire   [3:0] tmp_53_fu_868_p1;
wire   [3:0] tmp_54_fu_872_p2;
wire   [3:0] tmp_55_fu_878_p1;
wire   [3:0] filterYConstants_addr3_cast_fu_882_p2;
wire   [3:0] tmp_17_cast1_fu_822_p1;
wire   [3:0] filterYConstants_addr4_fu_888_p2;
wire   [2:0] grp_fu_936_p0;
wire   [7:0] grp_fu_936_p1;
wire   [2:0] grp_fu_945_p0;
wire   [7:0] grp_fu_945_p1;
wire   [2:0] grp_fu_954_p0;
wire   [7:0] grp_fu_954_p1;
wire   [2:0] grp_fu_963_p0;
wire   [7:0] grp_fu_963_p1;
wire   [2:0] grp_fu_969_p0;
wire   [7:0] grp_fu_969_p1;
wire   [2:0] grp_fu_975_p0;
wire   [7:0] grp_fu_975_p1;
wire   [23:0] tmp_27_fu_984_p0;
wire   [23:0] tmp_30_fu_994_p0;
wire   [23:0] tmp_33_fu_1004_p0;
wire   [23:0] tmp_35_fu_1014_p0;
wire   [23:0] tmp_37_fu_1024_p0;
wire   [23:0] tmp_39_fu_1034_p0;
wire    grp_fu_936_ce;
wire    grp_fu_945_ce;
wire    grp_fu_954_ce;
wire    grp_fu_963_ce;
wire    grp_fu_969_ce;
wire    grp_fu_975_ce;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b001;
parameter    ap_ST_st3_fsm_2 = 3'b010;
parameter    ap_ST_st4_fsm_3 = 3'b011;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_ST_st6_fsm_5 = 3'b101;
parameter    ap_ST_st7_fsm_6 = 3'b110;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv16_1 = 16'b0000000000000001;
parameter    ap_const_lv16_2 = 16'b0000000000000010;
parameter    ap_const_lv11_7FF = 11'b11111111111;
parameter    ap_const_lv12_9 = 12'b000000001001;
parameter    ap_const_lv12_7 = 12'b000000000111;
parameter    ap_const_lv24_3 = 24'b000000000000000000000011;
parameter    ap_const_lv32_8 = 32'b00000000000000000000000000001000;
parameter    ap_const_lv32_17 = 32'b00000000000000000000000000010111;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv24_8 = 24'b000000000000000000001000;
parameter    ap_const_lv32_10 = 32'b00000000000000000000000000010000;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b01;
parameter    ap_const_lv4_2 = 4'b0010;
parameter    ap_const_lv24_1 = 24'b000000000000000000000001;
parameter    ap_const_lv32_F = 32'b00000000000000000000000000001111;
parameter    ap_true = 1'b1;


sobel_pixelLine #(
    .DataWidth( 24 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
pixelLine_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( pixelLine_address0 ),
    .ce0( pixelLine_ce0 ),
    .we0( pixelLine_we0 ),
    .d0( pixelLine_d0 ),
    .q0( pixelLine_q0 )
);

sobel_filterYConstants #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
filterYConstants_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( filterYConstants_address0 ),
    .ce0( filterYConstants_ce0 ),
    .q0( filterYConstants_q0 )
);

sobel_filterXConstants #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
filterXConstants_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( filterXConstants_address0 ),
    .ce0( filterXConstants_ce0 ),
    .q0( filterXConstants_q0 )
);

sobel_mul_3s_8s_13_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8s_13_2_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_936_p0 ),
    .din1( grp_fu_936_p1 ),
    .ce( grp_fu_936_ce ),
    .dout( grp_fu_936_p2 )
);

sobel_mul_3s_8s_13_2 #(
    .ID( 2 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8s_13_2_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_945_p0 ),
    .din1( grp_fu_945_p1 ),
    .ce( grp_fu_945_ce ),
    .dout( grp_fu_945_p2 )
);

sobel_mul_3s_8s_13_2 #(
    .ID( 3 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8s_13_2_U3(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_954_p0 ),
    .din1( grp_fu_954_p1 ),
    .ce( grp_fu_954_ce ),
    .dout( grp_fu_954_p2 )
);

sobel_mul_3s_8s_13_2 #(
    .ID( 4 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8s_13_2_U4(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_963_p0 ),
    .din1( grp_fu_963_p1 ),
    .ce( grp_fu_963_ce ),
    .dout( grp_fu_963_p2 )
);

sobel_mul_3s_8s_13_2 #(
    .ID( 5 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8s_13_2_U5(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_969_p0 ),
    .din1( grp_fu_969_p1 ),
    .ce( grp_fu_969_ce ),
    .dout( grp_fu_969_p2 )
);

sobel_mul_3s_8s_13_2 #(
    .ID( 6 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
sobel_mul_3s_8s_13_2_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_975_p0 ),
    .din1( grp_fu_975_p1 ),
    .ce( grp_fu_975_ce ),
    .dout( grp_fu_975_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049))) begin
        countY <= storemerge_reg_258;
    end
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        filterXConstants_load_reg_1114 <= filterXConstants_q0;
    end
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        filterYConstants_load_reg_1109 <= filterYConstants_q0;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutXB <= tmp_39_fu_1034_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & (ap_const_lv1_0 == tmp_9_fu_392_p2))) begin
        pixelOutXB <= iftmp_2_fu_707_p3;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutXG <= tmp_37_fu_1024_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & (ap_const_lv1_0 == tmp_9_fu_392_p2))) begin
        pixelOutXG <= pixelOutXG_load_2_fu_654_p3;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutXR <= tmp_35_fu_1014_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & (ap_const_lv1_0 == tmp_9_fu_392_p2))) begin
        pixelOutXR <= pixelOutXR_load_2_fu_601_p3;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutYB <= tmp_33_fu_1004_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & (ap_const_lv1_0 == tmp_9_fu_392_p2))) begin
        pixelOutYB <= tmp_15_fu_548_p3;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutYG <= tmp_30_fu_994_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & (ap_const_lv1_0 == tmp_9_fu_392_p2))) begin
        pixelOutYG <= tmp_13_fu_495_p3;
    end
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pixelOutYR <= tmp_27_fu_984_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & (ap_const_lv1_0 == tmp_9_fu_392_p2))) begin
        pixelOutYR <= tmp_4_fu_442_p3;
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & (tmp_3_fu_288_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_fu_294_p2))) begin
        storemerge_reg_258 <= ap_const_lv24_0;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_806_p2))) begin
        storemerge_reg_258 <= tmp_41_fu_900_p2;
    end
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & ~(ap_const_lv1_0 == tmp_9_fu_392_p2))) begin
        tmp_11_reg_270 <= ap_const_lv2_0;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        tmp_11_reg_270 <= tmp_40_reg_1069;
    end
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        tmp_24_reg_1104 <= tmp_24_fu_926_p1;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_26_reg_1151 <= grp_fu_936_p2;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_29_reg_1156 <= grp_fu_945_p2;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_32_reg_1161 <= grp_fu_954_p2;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_34_reg_1166 <= grp_fu_963_p2;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_36_reg_1171 <= grp_fu_969_p2;
    end
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_38_reg_1176 <= grp_fu_975_p2;
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0))) begin
        tmp_3_reg_1045 <= tmp_3_fu_288_p2;
    end
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        tmp_40_reg_1069 <= tmp_40_fu_812_p2;
    end
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        tmp_51_reg_1094 <= {{pixelLine_q0[ap_const_lv32_17 : ap_const_lv32_10]}};
    end
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        tmp_52_reg_1099 <= {{pixelLine_q0[ap_const_lv32_F : ap_const_lv32_8]}};
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & (tmp_3_fu_288_p2 == ap_const_lv1_0))) begin
        tmp_6_reg_1049 <= tmp_6_fu_294_p2;
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & (tmp_3_fu_288_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_fu_294_p2))) begin
        tmp_8_cast_reg_1053 <= tmp_8_cast_fu_304_p2;
    end
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        tmp_reg_1041 <= tmp_fu_282_p2;
    end
end

/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_reg_1041 or tmp_3_reg_1045 or tmp_6_reg_1049 or exitcond_fu_806_p2 or tmp_9_fu_392_p2)
begin
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st7_fsm_6;
    end else if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st6_fsm_5;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st5_fsm_4;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_806_p2))) begin
        ap_NS_fsm = ap_ST_st4_fsm_3;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_6_reg_1049) | (ap_const_lv1_0 == tmp_9_fu_392_p2) | ~(tmp_reg_1041 == ap_const_lv1_0) | ~(tmp_3_reg_1045 == ap_const_lv1_0)))) begin
        ap_NS_fsm = ap_ST_st1_fsm_0;
    end else if (((ap_ST_st7_fsm_6 == ap_CS_fsm) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & ~(ap_const_lv1_0 == tmp_9_fu_392_p2)))) begin
        ap_NS_fsm = ap_ST_st3_fsm_2;
    end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_806_p2)))) begin
        ap_NS_fsm = ap_ST_st2_fsm_1;
    end else begin
        ap_NS_fsm = ap_CS_fsm;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or tmp_reg_1041 or tmp_3_reg_1045 or tmp_6_reg_1049 or tmp_9_fu_392_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_6_reg_1049) | (ap_const_lv1_0 == tmp_9_fu_392_p2) | ~(tmp_reg_1041 == ap_const_lv1_0) | ~(tmp_3_reg_1045 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp_reg_1041 or tmp_3_reg_1045 or tmp_6_reg_1049 or tmp_9_fu_392_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_6_reg_1049) | (ap_const_lv1_0 == tmp_9_fu_392_p2) | ~(tmp_reg_1041 == ap_const_lv1_0) | ~(tmp_3_reg_1045 == ap_const_lv1_0)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// filterXConstants_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_806_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_806_p2))) begin
        filterXConstants_ce0 = ap_const_logic_1;
    end else begin
        filterXConstants_ce0 = ap_const_logic_0;
    end
end

/// filterYConstants_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_806_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_806_p2))) begin
        filterYConstants_ce0 = ap_const_logic_1;
    end else begin
        filterYConstants_ce0 = ap_const_logic_0;
    end
end

/// filteredXPixel assign process. ///
always @ (ap_start or ap_CS_fsm or pixelLine_q0 or tmp_fu_282_p2 or tmp_reg_1041 or tmp_3_fu_288_p2 or tmp_3_reg_1045 or tmp_6_fu_294_p2 or tmp_6_reg_1049 or tmp_9_fu_392_p2 or tmp_49_fu_799_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_reg_1041 == ap_const_lv1_0))) begin
        filteredXPixel = pixelLine_q0;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & (ap_const_lv1_0 == tmp_9_fu_392_p2))) begin
        filteredXPixel = tmp_49_fu_799_p2;
    end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & (tmp_3_fu_288_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_6_fu_294_p2)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & ~(tmp_3_fu_288_p2 == ap_const_lv1_0)))) begin
        filteredXPixel = ap_const_lv24_0;
    end else begin
        filteredXPixel = tmp_49_fu_799_p2;
    end
end

/// filteredXPixel_ap_vld assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_282_p2 or tmp_reg_1041 or tmp_3_fu_288_p2 or tmp_3_reg_1045 or tmp_6_fu_294_p2 or tmp_6_reg_1049 or tmp_9_fu_392_p2)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & (ap_const_lv1_0 == tmp_9_fu_392_p2)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & (tmp_3_fu_288_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_6_fu_294_p2)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & ~(tmp_3_fu_288_p2 == ap_const_lv1_0)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_reg_1041 == ap_const_lv1_0)))) begin
        filteredXPixel_ap_vld = ap_const_logic_1;
    end else begin
        filteredXPixel_ap_vld = ap_const_logic_0;
    end
end

/// filteredYPixel assign process. ///
always @ (ap_start or ap_CS_fsm or pixelLine_q0 or tmp_fu_282_p2 or tmp_reg_1041 or tmp_3_fu_288_p2 or tmp_3_reg_1045 or tmp_6_fu_294_p2 or tmp_6_reg_1049 or tmp_9_fu_392_p2 or tmp_46_fu_754_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_reg_1041 == ap_const_lv1_0))) begin
        filteredYPixel = pixelLine_q0;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & (ap_const_lv1_0 == tmp_9_fu_392_p2))) begin
        filteredYPixel = tmp_46_fu_754_p2;
    end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & (tmp_3_fu_288_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_6_fu_294_p2)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & ~(tmp_3_fu_288_p2 == ap_const_lv1_0)))) begin
        filteredYPixel = ap_const_lv24_0;
    end else begin
        filteredYPixel = tmp_46_fu_754_p2;
    end
end

/// filteredYPixel_ap_vld assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_282_p2 or tmp_reg_1041 or tmp_3_fu_288_p2 or tmp_3_reg_1045 or tmp_6_fu_294_p2 or tmp_6_reg_1049 or tmp_9_fu_392_p2)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_reg_1041 == ap_const_lv1_0) & (tmp_3_reg_1045 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_reg_1049) & (ap_const_lv1_0 == tmp_9_fu_392_p2)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & (tmp_3_fu_288_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_6_fu_294_p2)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & ~(tmp_3_fu_288_p2 == ap_const_lv1_0)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_reg_1041 == ap_const_lv1_0)))) begin
        filteredYPixel_ap_vld = ap_const_logic_1;
    end else begin
        filteredYPixel_ap_vld = ap_const_logic_0;
    end
end

/// pixelLine_address0 assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_282_p2 or tmp_3_fu_288_p2 or exitcond_fu_806_p2 or pixelLine_addr8_cast_fu_346_p1 or pixelLine_addr1_cast_fu_387_p1 or pixelLine_addr6_cast_fu_863_p1)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & ~(tmp_3_fu_288_p2 == ap_const_lv1_0))) begin
        pixelLine_address0 = pixelLine_addr8_cast_fu_346_p1;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_806_p2))) begin
        pixelLine_address0 = pixelLine_addr6_cast_fu_863_p1;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_282_p2 == ap_const_lv1_0))) begin
        pixelLine_address0 = pixelLine_addr1_cast_fu_387_p1;
    end else begin
        pixelLine_address0 = pixelLine_addr8_cast_fu_346_p1;
    end
end

/// pixelLine_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_282_p2 or tmp_3_fu_288_p2 or exitcond_fu_806_p2)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_282_p2 == ap_const_lv1_0)) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_806_p2)) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & ~(tmp_3_fu_288_p2 == ap_const_lv1_0)))) begin
        pixelLine_ce0 = ap_const_logic_1;
    end else begin
        pixelLine_ce0 = ap_const_logic_0;
    end
end

/// pixelLine_we0 assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_282_p2 or tmp_3_fu_288_p2)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0) & (tmp_fu_282_p2 == ap_const_lv1_0) & ~(tmp_3_fu_288_p2 == ap_const_lv1_0))) begin
        pixelLine_we0 = ap_const_logic_1;
    end else begin
        pixelLine_we0 = ap_const_logic_0;
    end
end
assign exitcond_fu_806_p2 = (tmp_11_reg_270 == ap_const_lv2_3? 1'b1: 1'b0);
assign filterXConstants_address0 = filterYConstants_addr4_cast_fu_894_p1;
assign filterXConstants_load_cast_fu_960_p1 = $signed(filterXConstants_load_reg_1114);
assign filterYConstants_addr3_cast_fu_882_p2 = (tmp_54_fu_872_p2 - tmp_55_fu_878_p1);
assign filterYConstants_addr4_cast_fu_894_p1 = $unsigned(filterYConstants_addr4_fu_888_p2);
assign filterYConstants_addr4_fu_888_p2 = (filterYConstants_addr3_cast_fu_882_p2 + tmp_17_cast1_fu_822_p1);
assign filterYConstants_address0 = filterYConstants_addr4_cast_fu_894_p1;
assign filterYConstants_load_cast_fu_930_p1 = $signed(filterYConstants_load_reg_1109);
assign grp_fu_936_ce = ap_const_logic_1;
assign grp_fu_936_p0 = filterYConstants_load_cast_fu_930_p1;
assign grp_fu_936_p1 = tmp_25_cast_fu_933_p1;
assign grp_fu_945_ce = ap_const_logic_1;
assign grp_fu_945_p0 = filterYConstants_load_cast_fu_930_p1;
assign grp_fu_945_p1 = tmp_28_cast_fu_942_p1;
assign grp_fu_954_ce = ap_const_logic_1;
assign grp_fu_954_p0 = filterYConstants_load_cast_fu_930_p1;
assign grp_fu_954_p1 = tmp_31_cast_fu_951_p1;
assign grp_fu_963_ce = ap_const_logic_1;
assign grp_fu_963_p0 = filterXConstants_load_cast_fu_960_p1;
assign grp_fu_963_p1 = tmp_25_cast_fu_933_p1;
assign grp_fu_969_ce = ap_const_logic_1;
assign grp_fu_969_p0 = filterXConstants_load_cast_fu_960_p1;
assign grp_fu_969_p1 = tmp_28_cast_fu_942_p1;
assign grp_fu_975_ce = ap_const_logic_1;
assign grp_fu_975_p0 = filterXConstants_load_cast_fu_960_p1;
assign grp_fu_975_p1 = tmp_31_cast_fu_951_p1;
assign icmp1_fu_514_p2 = ($signed(tmp_16_fu_504_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp2_fu_567_p2 = ($signed(tmp_20_fu_557_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp3_fu_620_p2 = ($signed(tmp_22_fu_610_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp4_fu_673_p2 = ($signed(tmp_28_fu_663_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp8_fu_461_p2 = ($signed(tmp_5_fu_451_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign icmp_fu_408_p2 = ($signed(tmp_1_fu_398_p4) > $signed(16'b0000000000000000)? 1'b1: 1'b0);
assign iftmp_2_fu_707_p3 = ((tmp_42_fu_701_p2)? min5_cast_fu_697_p1: pixelOutXB);
assign min1_cast_fu_485_p0 = $signed(not_signbit1_fu_475_p2);
assign min1_cast_fu_485_p1 = $unsigned(min1_cast_fu_485_p0);
assign min2_cast_fu_538_p0 = $signed(not_signbit3_fu_528_p2);
assign min2_cast_fu_538_p1 = $unsigned(min2_cast_fu_538_p0);
assign min3_cast_fu_591_p0 = $signed(not_signbit6_fu_581_p2);
assign min3_cast_fu_591_p1 = $unsigned(min3_cast_fu_591_p0);
assign min4_cast_fu_644_p0 = $signed(not_signbit8_fu_634_p2);
assign min4_cast_fu_644_p1 = $unsigned(min4_cast_fu_644_p0);
assign min5_cast_fu_697_p0 = $signed(not_signbit_fu_687_p2);
assign min5_cast_fu_697_p1 = $unsigned(min5_cast_fu_697_p0);
assign min_cast_fu_432_p0 = $signed(not_signbit5_fu_422_p2);
assign min_cast_fu_432_p1 = $unsigned(min_cast_fu_432_p0);
assign not_signbit1_fu_475_p2 = (tmp_10_fu_467_p3 ^ ap_const_lv1_1);
assign not_signbit3_fu_528_p2 = (tmp_17_fu_520_p3 ^ ap_const_lv1_1);
assign not_signbit5_fu_422_p2 = (tmp_2_fu_414_p3 ^ ap_const_lv1_1);
assign not_signbit6_fu_581_p2 = (tmp_21_fu_573_p3 ^ ap_const_lv1_1);
assign not_signbit8_fu_634_p2 = (tmp_23_fu_626_p3 ^ ap_const_lv1_1);
assign not_signbit_fu_687_p2 = (tmp_31_fu_679_p3 ^ ap_const_lv1_1);
assign p_shl1_fu_365_p2 = tmp_1_cast_fu_351_p1 << ap_const_lv12_7;
assign p_shl2_fu_318_p2 = tmp_4_cast_fu_310_p1 << ap_const_lv12_9;
assign p_shl3_fu_324_p2 = tmp_4_cast_fu_310_p1 << ap_const_lv12_7;
assign p_shl4_fu_835_p2 = tmp_16_cast_fu_818_p1 << ap_const_lv12_9;
assign p_shl5_fu_841_p2 = tmp_16_cast_fu_818_p1 << ap_const_lv12_7;
assign p_shl_fu_359_p2 = tmp_1_cast_fu_351_p1 << ap_const_lv12_9;
assign pixelLine_addr1_cast_fu_387_p1 = $unsigned(pixelLine_addr1_fu_381_p2);
assign pixelLine_addr1_fu_381_p2 = (pixelLine_addr9_cast_fu_377_p1 + tmp_2_cast_fu_355_p1);
assign pixelLine_addr5_cast_fu_853_p1 = pixelLine_addr5_fu_847_p2[10:0];
assign pixelLine_addr5_fu_847_p2 = (p_shl4_fu_835_p2 + p_shl5_fu_841_p2);
assign pixelLine_addr6_cast_fu_863_p1 = $unsigned(pixelLine_addr6_fu_857_p2);
assign pixelLine_addr6_fu_857_p2 = (pixelLine_addr5_cast_fu_853_p1 + tmp_18_fu_830_p2);
assign pixelLine_addr7_cast_fu_336_p1 = pixelLine_addr7_fu_330_p2[10:0];
assign pixelLine_addr7_fu_330_p2 = (p_shl2_fu_318_p2 + p_shl3_fu_324_p2);
assign pixelLine_addr8_cast_fu_346_p1 = $unsigned(pixelLine_addr8_fu_340_p2);
assign pixelLine_addr8_fu_340_p2 = (pixelLine_addr7_cast_fu_336_p1 + tmp_5_cast_fu_314_p1);
assign pixelLine_addr9_cast_fu_377_p1 = pixelLine_addr9_fu_371_p2[10:0];
assign pixelLine_addr9_fu_371_p2 = (p_shl_fu_359_p2 + p_shl1_fu_365_p2);
assign pixelLine_d0 = pixel;
assign pixelOutXG_load_2_fu_654_p3 = ((tmp_25_fu_648_p2)? min4_cast_fu_644_p1: pixelOutXG);
assign pixelOutXR_load_2_fu_601_p3 = ((tmp_19_fu_595_p2)? min3_cast_fu_591_p1: pixelOutXR);
assign tmp45_fu_736_p2 = (tmp_44_fu_722_p1 | tmp_45_fu_726_p4);
assign tmp46_fu_742_p5 = {{tmp45_fu_736_p2}, {tmp_43_fu_716_p2[32'd15 : 32'd0]}};
assign tmp49_fu_781_p2 = (tmp_48_fu_767_p1 | tmp_50_fu_771_p4);
assign tmp50_fu_787_p5 = {{tmp49_fu_781_p2}, {tmp_47_fu_761_p2[32'd15 : 32'd0]}};
assign tmp_10_fu_467_p3 = pixelOutYG[ap_const_lv32_17];
assign tmp_12_fu_489_p2 = (tmp_10_fu_467_p3 | icmp8_fu_461_p2);
assign tmp_13_fu_495_p3 = ((tmp_12_fu_489_p2)? min1_cast_fu_485_p1: pixelOutYG);
assign tmp_14_fu_542_p2 = (tmp_17_fu_520_p3 | icmp1_fu_514_p2);
assign tmp_15_fu_548_p3 = ((tmp_14_fu_542_p2)? min2_cast_fu_538_p1: pixelOutYB);
assign tmp_16_cast_fu_818_p1 = countY[11:0];
assign tmp_16_fu_504_p4 = {{pixelOutYB[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_17_cast1_fu_822_p1 = $unsigned(tmp_11_reg_270);
assign tmp_17_cast_fu_826_p1 = $unsigned(tmp_11_reg_270);
assign tmp_17_fu_520_p3 = pixelOutYB[ap_const_lv32_17];
assign tmp_18_fu_830_p2 = (tmp_8_cast_reg_1053 + tmp_17_cast_fu_826_p1);
assign tmp_19_fu_595_p2 = (tmp_21_fu_573_p3 | icmp2_fu_567_p2);
assign tmp_1_cast_fu_351_p1 = pixelLineCount[11:0];
assign tmp_1_fu_398_p4 = {{pixelOutYR[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_20_fu_557_p4 = {{pixelOutXR[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_21_fu_573_p3 = pixelOutXR[ap_const_lv32_17];
assign tmp_22_fu_610_p4 = {{pixelOutXG[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_23_fu_626_p3 = pixelOutXG[ap_const_lv32_17];
assign tmp_24_fu_926_p1 = pixelLine_q0[7:0];
assign tmp_25_cast_fu_933_p1 = $signed(tmp_51_reg_1094);
assign tmp_25_fu_648_p2 = (tmp_23_fu_626_p3 | icmp3_fu_620_p2);
assign tmp_27_fu_984_p0 = $signed(tmp_26_reg_1151);
assign tmp_27_fu_984_p2 = (tmp_27_fu_984_p0 + pixelOutYR);
assign tmp_28_cast_fu_942_p1 = $signed(tmp_52_reg_1099);
assign tmp_28_fu_663_p4 = {{pixelOutXB[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_2_cast_fu_355_p1 = pixelColumnCount[10:0];
assign tmp_2_fu_414_p3 = pixelOutYR[ap_const_lv32_17];
assign tmp_30_fu_994_p0 = $signed(tmp_29_reg_1156);
assign tmp_30_fu_994_p2 = (tmp_30_fu_994_p0 + pixelOutYG);
assign tmp_31_cast_fu_951_p1 = $signed(tmp_24_reg_1104);
assign tmp_31_fu_679_p3 = pixelOutXB[ap_const_lv32_17];
assign tmp_33_fu_1004_p0 = $signed(tmp_32_reg_1161);
assign tmp_33_fu_1004_p2 = (tmp_33_fu_1004_p0 + pixelOutYB);
assign tmp_35_fu_1014_p0 = $signed(tmp_34_reg_1166);
assign tmp_35_fu_1014_p2 = (tmp_35_fu_1014_p0 + pixelOutXR);
assign tmp_37_fu_1024_p0 = $signed(tmp_36_reg_1171);
assign tmp_37_fu_1024_p2 = (tmp_37_fu_1024_p0 + pixelOutXG);
assign tmp_39_fu_1034_p0 = $signed(tmp_38_reg_1176);
assign tmp_39_fu_1034_p2 = (tmp_39_fu_1034_p0 + pixelOutXB);
assign tmp_3_fu_288_p2 = (mode == ap_const_lv16_1? 1'b1: 1'b0);
assign tmp_40_fu_812_p2 = (tmp_11_reg_270 + ap_const_lv2_1);
assign tmp_41_fu_900_p2 = (countY + ap_const_lv24_1);
assign tmp_42_fu_701_p2 = (tmp_31_fu_679_p3 | icmp4_fu_673_p2);
assign tmp_43_fu_716_p2 = tmp_13_fu_495_p3 << ap_const_lv24_8;
assign tmp_44_fu_722_p1 = tmp_4_fu_442_p3[7:0];
assign tmp_45_fu_726_p4 = {{tmp_43_fu_716_p2[ap_const_lv32_17 : ap_const_lv32_10]}};
assign tmp_46_fu_754_p2 = (tmp46_fu_742_p5 | tmp_15_fu_548_p3);
assign tmp_47_fu_761_p2 = pixelOutXG_load_2_fu_654_p3 << ap_const_lv24_8;
assign tmp_48_fu_767_p1 = pixelOutXR_load_2_fu_601_p3[7:0];
assign tmp_49_fu_799_p2 = (tmp50_fu_787_p5 | iftmp_2_fu_707_p3);
assign tmp_4_cast_fu_310_p1 = pixelLineCount[11:0];
assign tmp_4_fu_442_p3 = ((tmp_8_fu_436_p2)? min_cast_fu_432_p1: pixelOutYR);
assign tmp_50_fu_771_p4 = {{tmp_47_fu_761_p2[ap_const_lv32_17 : ap_const_lv32_10]}};
assign tmp_53_fu_868_p1 = countY[3:0];
assign tmp_54_fu_872_p2 = tmp_53_fu_868_p1 << ap_const_lv4_2;
assign tmp_55_fu_878_p1 = countY[3:0];
assign tmp_5_cast_fu_314_p1 = pixelColumnCount[10:0];
assign tmp_5_fu_451_p4 = {{pixelOutYG[ap_const_lv32_17 : ap_const_lv32_8]}};
assign tmp_6_fu_294_p2 = (mode == ap_const_lv16_2? 1'b1: 1'b0);
assign tmp_7_fu_300_p1 = pixelColumnCount[10:0];
assign tmp_8_cast_fu_304_p2 = (tmp_7_fu_300_p1 + ap_const_lv11_7FF);
assign tmp_8_fu_436_p2 = (tmp_2_fu_414_p3 | icmp_fu_408_p2);
assign tmp_9_fu_392_p2 = ($signed(storemerge_reg_258) < $signed(24'b000000000000000000000011)? 1'b1: 1'b0);
assign tmp_fu_282_p2 = (mode == ap_const_lv16_0? 1'b1: 1'b0);


endmodule //sobel

