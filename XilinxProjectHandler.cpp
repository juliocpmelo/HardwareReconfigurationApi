#include "XilinxProjectHandler.h"

#include <fstream>

using namespace std;

XilinxProjectHandler::XilinxProjectHandler(std::string projectName, std::string projectPath){
	this->projectName = projectName;
	this->projectPath = projectPath;
	buildProjectFile(projectPath);
}

void XilinxProjectHandler::buildProjectFile(std::string projectFilePath){

	string projectFile = projectFilePath + "/" + projectName + ".prj";
	ofstream prjFile;
	prjFile.open(projectFile.c_str());
	prjFile<<"#This project file was generated by the HardwareReconfiguration API"<<endl;
	prjFile.close();
}

void XilinxProjectHandler::addFile(std::string file){
	this->usedFiles.push_back(file);
	copyFile(file, projectPath);
}

void XilinxProjectHandler::copyFile(std::string file, std::string destPath){
	ifstream ifs(file.c_str(), std::ios::binary);
	string fileName = file.substr(file.find_last_of("/")+1,file.size());
	cout<<"copying file name "<<file << " to "<<endl<<destPath + "/" + fileName<<endl;
	ofstream ofs((destPath+"/"+fileName).c_str(), std::ios::binary);
	ofs << ifs.rdbuf();
	filesInProject.push_back(destPath+"/"+fileName);
}

void XilinxProjectHandler::removeFile(std::string file){

	for(vector<string>::iterator it = usedFiles.begin(); it!= usedFiles.end(); it++){
		if (*it == file){
			usedFiles.erase(it);
			break;
		}
	}
}

void XilinxProjectHandler::compileProject(){
	
	for(vector<string>::iterator it = usedFiles.begin(); it!= usedFiles.end(); it++)
		this->copyFile(*it , projectPath);

}

