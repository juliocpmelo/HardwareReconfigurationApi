
#include "HardwareComponentConverterVHDL.h"
#include <sstream>
#include <map>
using namespace std;

HardwareComponentConverterVHDL::HardwareComponentConverterVHDL(){

}

std::string HardwareComponentConverterVHDL::translateType(HardwareComponent::DataType type, int size){
	stringstream convertedType;
	switch (type){
		case HardwareComponent::DataType_vector:{
			convertedType<<"std_logic_vector("<<size-1<<" downto 0)"<<endl;
		}
		case HardwareComponent::DataType_bit:{
			convertedType<<"std_logic"<<endl;
		}
		case HardwareComponent::DataType_integer:{
			convertedType<<"integer : range (0 to "<<size<<")"<<endl;
		}
	}
	return convertedType.str();
}

std::string HardwareComponentConverterVHDL::translatePort(sc_port_base* port){
	
	stringstream convertedPort;

	if(strcmp(port->kind(),"sc_in") == 0){
		convertedPort<<"\t"<<port->name()<<": in ";
		sc_attribute<int> *size = dynamic_cast<sc_attribute<int>*>(port->get_attribute("PortSize"));
		sc_attribute<HardwareComponent::DataType> *type = dynamic_cast<sc_attribute<HardwareComponent::DataType>*>(port->get_attribute("PortType"));
		string typeStr = translateType(type->value,size->value);
		convertedPort<<typeStr<<endl;
	}

	return convertedPort.str();

}

std::string HardwareComponentConverterVHDL::translateSignal(sc_signal_resolved* signal){
	
	stringstream convertedSignal;
	
	sc_attribute<int> *size = dynamic_cast<sc_attribute<int>*>(signal->get_attribute("SignalSize"));
	sc_attribute<HardwareComponent::DataType> *type = dynamic_cast<sc_attribute<HardwareComponent::DataType>*>(signal->get_attribute("SignalType"));

	convertedSignal<<"signal "<<signal->name()<<" : "<<translateType(type->value, size->value);
	return convertedSignal.str();
}

std::vector<sc_signal_resolved* > * HardwareComponentConverterVHDL::getSignals(HardwareComponent *comp) {
	std::vector<sc_signal_resolved* > *signals = new vector<sc_signal_resolved* >;
	std::vector<sc_object*> children = comp->get_child_objects();
	for (std::vector<sc_object*>::iterator i = children.begin(); i != children.end(); i++) {
		if ( std::string((*i)->kind())=="sc_signal_resolved")	{
			sc_signal_resolved* mptr = dynamic_cast<sc_signal_resolved*>(*i);
			signals->push_back(mptr);
		}
	}
	return signals;
}


void HardwareComponentConverterVHDL::buildTopComponentFile(string projectPath, HardwareComponent *topComponent){
    ofstream designFile;
    string fileLocation = projectPath+topComponent->name()+".vhdl";
    designFile.open (fileLocation.c_str());
    designFile <<"-- This file was auto generated by the HardwareProjectXmlParser"<<endl<<endl;
    designFile <<"library ieee, combinationalLibrary;"<<endl;
    designFile <<"use ieee.std_logic_1164.all;"<<endl;
    designFile <<"use ieee.std_logic_unsigned.all;"<<endl<<endl;

		/* by default dont generate main entity with generics
    if(genericTable.size() > 0){
        designFile <<"generic ("<<endl;
        map<string, pair<string,string> >::iterator lastElement = genericTable.end();
        lastElement --;
        for(map<string, pair<string,string> >::iterator it = genericTable.begin(); it != lastElement; it++){
            if(it->second.second == "") //has no default value
                designFile <<"\t"<<it->first<<" : "<<it->second.first<<";"<<endl;
            else
                designFile <<"\t"<<it->first<<" : "<<it->second.first<<" := "<<it->second.second<<";"<<endl;
        }
        if(lastElement->second.second == "") //has no default value
                designFile <<"\t"<<lastElement->first<<" : "<<lastElement->second.first<<";"<<endl;
        else
            designFile <<"\t"<<lastElement->first<<" : "<<lastElement->second.first<<" := "<<lastElement->second.second<<endl;
        designFile <<");"<<endl;
    }

		*/
    /*generate the header of the entity with the input/outputs*/

    designFile <<"entity "<<topComponent->name()<<" is"<<endl; //TODO place the main tag name here
    designFile <<"port ("<<endl;
		
    std::map<std::string, sc_port_base* > *portsTable = &(topComponent->ports);

		map<string, sc_port_base*>::iterator lastElement = portsTable->end();
		lastElement --;
		for(map<string, sc_port_base*>::iterator it = portsTable->begin(); it != portsTable->end(); it++){
			if (it == lastElement)
				designFile<<translatePort(it->second)<<endl;
			else
				designFile<<translatePort(it->second)<<";"<<endl;

		}
		designFile <<");"<<endl;

    designFile <<"end "<<topComponent->name()<<";"<<endl<<endl;

    designFile<<"architecture arch of "<<topComponent->name()<<" is"<<endl;

    /*generate the component declaration in the architecture file*/
/*    for(set<HardwareComponent::HardwareComponentInfo*>::iterator it = usedComponensInfo.begin(); it!= usedComponentsInfo.end(); it ++){
        designFile<<"\t"<<"component "<<it->first.name<<endl;
        map<string, pair<string,string> > genericInputs = it->first.genericTable;
        if(genericInputs.size() > 0){
            designFile <<"\t\tgeneric ("<<endl;
            map<string, pair<string,string> >::iterator lastElement = genericInputs.end();
            lastElement --;
            for(map<string, pair<string,string> >::iterator it = genericInputs.begin(); it != lastElement; it++){
                if(it->second.second == "") //has no default value
                    designFile <<"\t\t\t"<<it->first<<" : "<<it->second.first<<";"<<endl;
                else
                    designFile <<"\t\t\t"<<it->first<<" : "<<it->second.first<<" := "<<it->second.second<<";"<<endl;
            }
            if(lastElement->second.second == "") //has no default value
                    designFile <<"\t\t\t"<<lastElement->first<<" : "<<lastElement->second.first<<";"<<endl;
            else
                designFile <<"\t\t\t"<<lastElement->first<<" : "<<lastElement->second.first<<" := "<<lastElement->second.second<<endl;
						
            designFile <<"\t\t);"<<endl;
						
        }

        vector< pair<string,string> > inputPorts = it->first.inputs;
        vector< pair<string,string> > outputPorts = it->first.outputs;
        if(inputPorts.size() > 0 && outputPorts.size() > 0){
            for(vector< pair<string,string> >::iterator it2 = inputPorts.begin(); it2!= inputPorts.end(); it2 ++){
                designFile<<"\t\t\t"<<it2->first<<": in "<<it2->second<<";"<<endl;
            }
            vector< pair<string,string> >::iterator lastElement = outputPorts.end();
            lastElement--;
            for(vector< pair<string,string> >::iterator it2 = outputPorts.begin(); it2!= lastElement; it2 ++){
                designFile<<"\t\t\t"<<it2->first<<": out "<<it2->second<<";"<<endl;
            }
            designFile<<"\t\t\t"<<lastElement->first<<": out "<<lastElement->second<<endl;
        }
        else if(inputPorts.size() > 0){
            vector< pair<string,string> >::iterator lastElement = inputPorts.end();
            lastElement--;
            for(vector< pair<string,string> >::iterator it2 = inputPorts.begin(); it2!= lastElement; it2 ++){
                designFile<<"\t\t\t"<<it2->first<<": in "<<it2->second<<";"<<endl;
            }
            designFile<<"\t\t\t"<<lastElement->first<<": in "<<lastElement->second<<endl;
        }
        else if(outputPorts.size() > 0){
            vector< pair<string,string> >::iterator lastElement = outputPorts.end();
            lastElement--;
            for(vector< pair<string,string> >::iterator it2 = outputPorts.begin(); it2!= lastElement; it2 ++){
                designFile<<"\t\t\t"<<it2->first<<": out "<<it2->second<<";"<<endl;
            }
            designFile<<"\t\t\t"<<lastElement->first<<": out "<<lastElement->second<<endl;
        }
        designFile<<"\t\t"<<");"<<endl;
        designFile<<"\tend component;"<<endl;

    }
				*/
    
		vector<sc_signal_resolved*> *signals = getSignals(topComponent);
    for(vector<sc_signal_resolved*>::iterator it = signals->begin(); it!= signals->end(); it ++){
			string translation = translateSignal(*it);
			designFile<<translateSignal(*it)<<";"<<endl;
    }
		
    designFile<<"begin"<<endl;
/*
    for(map<Component, vector<ComponentInstance>, ComponentCompare >::iterator it = componentTable.begin(); it!= componentTable.end(); it ++){
        vector<ComponentInstance>::iterator instanceIt;
        for(instanceIt = it->second.begin(); instanceIt != it->second.end(); instanceIt ++){
            if(instanceIt->portMaps.size() > 0){ //dont initialize a component without binds
                designFile<<instanceIt->name<<" : "<<it->first.name<<endl;
                if(instanceIt->genericMaps.size() > 0){
                    designFile<<"generic map ("<<endl;
                    vector<pair<string,string> >::iterator lastElement = instanceIt->genericMaps.end();
                    lastElement --;
                    bool useGenericNames = false;
                    if(instanceIt->genericMaps.begin()->first != "") //if the first one uses the format genericName => value the others must use it too
                        useGenericNames = true;
                    for(vector<pair<string,string> >::iterator genericIt = instanceIt->genericMaps.begin(); genericIt != lastElement; genericIt ++){
                        if(useGenericNames)
                            designFile<<genericIt->first<<" => "<<genericIt->second<<endl;
                        else
                            designFile<<genericIt->second<<endl;
                    }
                    if(useGenericNames)
                        designFile<<lastElement->first<<" => "<<lastElement->second<<endl;
                    else
                        designFile<<lastElement->second<<endl;
                    designFile<<")"<<endl;
                }
                designFile<<"port map ("<<endl;
               
                vector<pair<string,string> >::iterator lastElement = instanceIt->portMaps.end();
                lastElement --;
                bool usePortNames = false;
                if(instanceIt->portMaps.begin()->first != "") //if the first one uses the format portName => value the others must use it too
                    usePortNames = true;
                for(vector<pair<string,string> >::iterator genericIt = instanceIt->portMaps.begin(); genericIt != lastElement; genericIt ++){
                    if(usePortNames)
                        designFile<<genericIt->first<<" => "<<genericIt->second<<endl;
                    else
                        designFile<<genericIt->second<<endl;
                }
                if(usePortNames)
                    designFile<<lastElement->first<<" => "<<lastElement->second<<endl;
                else
                    designFile<<lastElement->second<<endl;
                designFile<<")"<<endl;
            
                designFile<<");"<<endl<<endl;
            }
        }
    }

    for(vector< pair<string,string> >::iterator it = signalMaps.begin(); it!=signalMaps.end(); it++){
        designFile<<it->first<<" <= "<<it->second<<";"<<endl;
    }
    designFile<<endl;
*/
    designFile<<"end arch;"<<endl;
    
    designFile.close();
    cout<<"design file saved to "<<fileLocation<<endl;

}


