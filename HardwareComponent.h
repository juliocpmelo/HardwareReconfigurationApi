#ifndef HardwareComponent_h
#define HardwareComponent_h

#include <systemc.h>

#include <map>
#include <set>

SC_MODULE(HardwareComponent) {
	typedef enum DataType_t{
		DataType_vector,
		DataType_bit,
		DataType_integer,
		DataType_string
	}DataType;

	typedef struct PortInfo_t{
		std::string name;
		DataType type;
		int size;
		sc_port_base * scPort;
	}PortInfo;

	typedef struct ParamInfo_t{
		std::string name;
		DataType type;
		int size;
		std::string defaultValue;
	}ParamInfo;


/*this information table should be generated by the ComponentDatabase or ComponentLocator*/
	typedef struct HardwareComponentInfo_t{
	/*maybe put here the files and dependencies*/
    std::string name;
    std::map<std::string, PortInfo > inputs;
    std::map<std::string, PortInfo > outputs;

		/*generic name, type, default value*/
    std::map<std::string, ParamInfo > componentParameters;

		/*list of files that need to be compiled in order to get this component corretly synthesised*/
		std::set<std::string> dependencyFiles;
	
		/* file including the declaration of the current component
		 * declaration is used in 
		 * - vhdl: component name begin ... end;
		 * - verilog: `include file
		 * TODO: autogenerate both declaration files from their source code or include
		 * this information in the xml description
		 */
		std::string componentDeclaration;

	}HardwareComponentInfo;


	private:
		void buildComponentPorts();

	public:
		std::map<std::string, PortInfo*> ports;
		bool isDynamic;
		HardwareComponentInfo *componentInfo;
		//table containing information about the component
	
	public:
		SC_HAS_PROCESS(HardwareComponent);
		HardwareComponent(sc_module_name name, HardwareComponentInfo *infoTable);

		/*functions used in dynamic creation*/
		void addInput(std::string name, DataType type, int size = 1);
		void addOutput(std::string name, DataType type, int size = 1);
		void addInout(std::string name, DataType type, int size = 1);
		sc_port_base* getPort(std::string name);
		void portMap(std::string selfPortName, sc_port_base* port);
		void portMap(std::string selfPortName, sc_signal_resolved* signal);
		void addChildObject(sc_object *child);

	private:
		void addPortAttributes(std::string name, DataType type, int size);

};

#endif
